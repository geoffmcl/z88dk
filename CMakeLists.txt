# CMakeLists.txt, generated by showsln.pl, on 2020/07/12 17:28:20
# Beginning with win32\z88dk.sln,
# processed 25 'sln' files, 4632 lines, for 5 libs & 19 exes.
cmake_minimum_required( VERSION 3.6 )

# CMakeScripts or use the ones that come by default with CMake.
# set(CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/CMakeModules ${CMAKE_MODULE_PATH})

project( z88dk )

# The version number. *** FIX ME ***
set( z88dk_MAJOR 4 )
set( z88dk_MINOR 0 )
set( z88dk_POINT 0 )

# Allow developer to select is Dynamic or static library built
set( LIB_TYPE STATIC )  # set default static
option( BUILD_SHARED_LIB "Set ON to build shared Library (DLL)" OFF )
option( BUILD_COMMON "Set OFF to not build this component" ON )
option( BUILD_GETOPT "Set OFF to not build this component" ON )
option( BUILD_REGEX "Set OFF to not build this component" ON )
option( BUILD_UNIXEM "Set OFF to not build this component" ON )
option( BUILD_Z80ASM_COMMON "Set OFF to not build this component" ON )
option( BUILD_APPMAKE "Set OFF to not build this component" ON )
option( BUILD_CONFIG "Set OFF to not build this component" ON )
option( BUILD_SCCZ80 "Set OFF to not build this component" ON )
option( BUILD_TEST_COMMON "Set OFF to not build this component" ON )
option( BUILD_Z80ASM "Set OFF to not build this component" ON )
option( BUILD_Z80ASM2 "Set OFF to not build this component" ON )
option( BUILD_Z80NM "Set OFF to not build this component" ON )
option( BUILD_Z88DK_COPT "Set OFF to not build this component" ON )
option( BUILD_Z88DK_DIS "Set OFF to not build this component" ON )
option( BUILD_Z88DK_DZX7 "Set OFF to not build this component" ON )
option( BUILD_Z88DK_LIB "Set OFF to not build this component" ON )
option( BUILD_Z88DK_MAP "Set OFF to not build this component" ON )
option( BUILD_Z88DK_TICKS "Set OFF to not build this component" ON )
option( BUILD_Z88DK_UCPP "Set OFF to not build this component" ON )
option( BUILD_Z88DK_ZCPP "Set OFF to not build this component" ON )
option( BUILD_Z88DK_ZPRAGMA "Set OFF to not build this component" ON )
option( BUILD_Z88DK_ZX7 "Set OFF to not build this component" ON )
option( BUILD_ZCC "Set OFF to not build this component" ON )
option( BUILD_ZOBJCOPY "Set OFF to not build this component" ON )


if(CMAKE_COMPILER_IS_GNUCXX)
    set( WARNING_FLAGS -Wall )
endif()

if (CMAKE_CXX_COMPILER_ID STREQUAL "Clang") 
   set( WARNING_FLAGS "-Wall -Wno-overloaded-virtual" )
endif() 

if(WIN32 AND MSVC)
    # turn off various warnings - none needed in this compile
    set(WARNING_FLAGS "${WARNING_FLAGS} /wd4996")
    # foreach(warning 4244 4251 4267 4275 4290 4786 4305)
    #     set(WARNING_FLAGS "${WARNING_FLAGS} /wd${warning}")
    # endforeach(warning)
    # other flags -DNOMINMAX  -D_SCL_SECURE_NO_WARNINGS -D__CRT_NONSTDC_NO_WARNINGS
    set( MSVC_FLAGS "-D_USE_MATH_DEFINES -D_CRT_SECURE_NO_WARNINGS" )
    # if (${MSVC_VERSION} EQUAL 1600)
    #    set( MSVC_LD_FLAGS "/FORCE:MULTIPLE" )
    # endif (${MSVC_VERSION} EQUAL 1600)
    #set( NOMINMAX 1 )
    # to distinguish between debug and release libs
    set( CMAKE_DEBUG_POSTFIX "d" )
    option( USE_STATIC_RUNTIME "Set ON to change /MD(DLL) to /MT(static)" ON )
    if (USE_STATIC_RUNTIME)
        set(CompilerFlags
            CMAKE_CXX_FLAGS
            CMAKE_CXX_FLAGS_DEBUG
            CMAKE_CXX_FLAGS_RELEASE
            CMAKE_C_FLAGS
            CMAKE_C_FLAGS_DEBUG
            CMAKE_C_FLAGS_RELEASE
            )
        foreach(CompilerFlag ${CompilerFlags})
            string(REPLACE "/MD" "/MT" ${CompilerFlag} "${${CompilerFlag}}")
        endforeach()    
        message(STATUS "Using /MT STATIC runtime")
    else ()
        message(STATUS "Using /MD DYNAMIC runtime")
    endif ()
else()
    # items for unix
endif()

set( CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${WARNING_FLAGS} ${MSVC_FLAGS} -D_REENTRANT" )
set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${WARNING_FLAGS} ${MSVC_FLAGS} -D_REENTRANT" )
set( CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${MSVC_LD_FLAGS}" )

# check 64 bit
if( "${CMAKE_SIZEOF_VOID_P}" STREQUAL "4" )
   set( BITNESS x86 )
   set( HAVE_64_BIT 0 )
   message(STATUS "*** Seems sizeof(void *) = 4 == 32-bits")
elseif( "${CMAKE_SIZEOF_VOID_P}" STREQUAL "8" )
   set( HAVE_64_BIT 1 )
   set( BITNESS x64 )
   message(STATUS "*** Seems sizeof(void *) == 8 == 64-bits")
   if (MSVC)
       add_definitions( -DWIN64=1 )
   endif ()
else ()
   message(FATAL_ERROR "Variable CMAKE_SIZEOF_VOID_P=${CMAKE_SIZEOF_VOID_P} NOT 4 or 8! *** FIX ME ***")
endif()

# get some git variables
#################################################
execute_process(
    COMMAND
        git rev-parse --short HEAD
    RESULT_VARIABLE
        SHORT_HASH_RESULT
    OUTPUT_VARIABLE
        SHORT_HASH)
#failed - string(STRIP SHORT_HASH, SHORT_HASH)
string(REGEX REPLACE "\n$" "" SHORT_HASH "${SHORT_HASH}")
execute_process(
    COMMAND
        git rev-list --count HEAD
    RESULT_VARIABLE
        HASH_COUNT_RESULT
    OUTPUT_VARIABLE
        HASH_COUNT)
string(REGEX REPLACE "\n$" "" HASH_COUNT "${HASH_COUNT}")
#################################################

# If running in script mode (this runs on every build)
if (CMAKE_SCRIPT_MODE_FILE)
    if (EXISTS "${SHORT_HASH_FILE}")
        file(READ ${SHORT_HASH_FILE} READ_IN_SHORT_HASH)
    else()
        set(READ_IN_SHORT_HASH "")
    endif()

    if (NOT ("${READ_IN_SHORT_HASH}" STREQUAL "${SHORT_HASH}"))
        message(STATUS "*** Short hash is out of date ${READ_IN_SHORT_HASH} vs ${SHORT_HASH}")
        # This will update short_hash.txt, causing cmake to reconfigure
        file(WRITE ${SHORT_HASH_FILE} ${SHORT_HASH})
    else()
        message(STATUS "*** Short has remains unchanged ${SHORT_HASH}")
    endif()

# Else running as part of cmake configure
else()
    set(SHORT_HASH_FILE ${CMAKE_CURRENT_BINARY_DIR}/short_hash.txt)
    file(WRITE ${SHORT_HASH_FILE} ${SHORT_HASH})

    # The trick here is to make sure short_hash.txt is listed as a byproduct
    #add_custom_target(
    #    git_short_hash
    #    BYPRODUCTS
    #        ${SHORT_HASH_FILE}
    #    COMMAND
    #        ${CMAKE_COMMAND}
    #        "-DSHORT_HASH_FILE=${SHORT_HASH_FILE}"
    #        "-P" "${CMAKE_CURRENT_LIST_FILE}"
    #    COMMENT
    #        "Re-checking short hash..."
    #    VERBATIM
    #    USES_TERMINAL)

    # This configure_file makes cmake reconfigure dependent on short_hash.txt
    # configure_file(${SHORT_HASH_FILE} ${SHORT_HASH_FILE}.junk COPYONLY)

    message(STATUS "*** Written Short Hash: ${SHORT_HASH} to ${SHORT_HASH_FILE}")
endif()

# test to create a config file from cmake
set(OUT_FILE "${CMAKE_SOURCE_DIR}/src/config.h")
#set(DAT $ENV{"DATE"})
string(TIMESTAMP TODAY "%Y%m%d")
# combine together...
set(_REF "${BITNESS} ${TODAY} ${SHORT_HASH} ${HASH_COUNT}")
if(MSVC)
set(VERS "MSVC ${_REF}")
elseif(WIN32)
set(VERS "WIN32 ${_REF}")
else()
set(VERS "UNIX ${_REF}")
endif()
file(WRITE  ${OUT_FILE} "/* Do **NOT** modify - written by cmake - modify\n")
file(APPEND ${OUT_FILE} "   CMakeLists.txt, and re-run cmake config. */\n")
file(APPEND ${OUT_FILE} "#ifndef _CONFIG_H_\n")
file(APPEND ${OUT_FILE} "#define _CONFIG_H_\n")
file(APPEND ${OUT_FILE} "\n")
file(APPEND ${OUT_FILE} "#define PREFIX \"/usr/local/share/z88dk\"\n")
file(APPEND ${OUT_FILE} "#define EXEC_PREFIX \"\"\n")
file(APPEND ${OUT_FILE} "#ifndef Z88DK_VERSION\n")
file(APPEND ${OUT_FILE} "#define Z88DK_VERSION \"${VERS}\"\n")
file(APPEND ${OUT_FILE} "#endif // ifndef Z88DK_VERSION\n")
file(APPEND ${OUT_FILE} "\n")
file(APPEND ${OUT_FILE} "#endif // ifndef _CONFIG_H_\n")
message(STATUS "*** Written ${VERS} to ${OUT_FILE} ...")
# Alternativel, could also do the version as -
# add_definitions( -DZ88DK_VERSION="${VERS}" )

# configuration file, if needed
# configure_file( ${CMAKE_SOURCE_DIR}/config.h.cmake ${CMAKE_BINARY_DIR}/config.h )
# add_definitions( -DHAVE_CONFIG_H )
# include_directories( ${CMAKE_BINARY_DIR} )

if(BUILD_SHARED_LIB)
   set(LIB_TYPE SHARED)
   message(STATUS "*** Building DLL library ${LIB_TYPE}")
else()
   message(STATUS "*** Option BUILD_SHARED_LIB is OFF ${LIB_TYPE}")
endif()

# User added include directories...
include_directories( ext/UNIXem/include )
include_directories( ext/uthash/src )
include_directories( ext/regex )
include_directories( ext/optparse )
include_directories( src/common )
include_directories( ext/Unity/src )
include_directories( src/ucpp )
include_directories( src/z80asm/lib )
include_directories( ext )
include_directories( ext/getopt )
# Other suggested include directories...
#include_directories( ext/UNIXem/src )
#include_directories( ext/getopt )
#include_directories( ext/regex )
#include_directories( src/appmake )
#include_directories( src/common )
#include_directories( src/copt )
#include_directories( src/cpp )
#include_directories( src/sccz80 )
#include_directories( src/ticks )
#include_directories( src/ucpp )
#include_directories( src/z80asm )
#include_directories( src/z80asm/dev/z80asm2 )
#include_directories( src/z88dk-lib )
#include_directories( src/z88dk-map )
#include_directories( src/zcc )
#include_directories( src/zobjcopy )
#include_directories( src/zpragma )
#include_directories( src/zx7 )
#include_directories( win32/config )

#################################################
##### LIBRARIES 5 #####
#################################################

# from D:\UTILS\z88dk-fork\win32\common\common.vcxproj
if (BUILD_COMMON)
set(name common)
set(dir src/common)
set( ${name}_SRCS
   ${dir}/die.c
   ${dir}/dirname.c
   ${dir}/fileutil.c
   ${dir}/objfile.c
   ${dir}/optparse.c
   ${dir}/strutil.c
   ${dir}/zutils.c
   )
set( ${name}_HDRS
   ${dir}/die.h
   ${dir}/dirname.h
   ${dir}/fileutil.h
   ${dir}/objfile.h
   ${dir}/strutil.h
   ${dir}/types.h
   ${dir}/zutils.h
   )
add_library( ${name} ${LIB_TYPE} ${${name}_SRCS} ${${name}_HDRS} )
list(APPEND add_LIBS ${name})
# deal with install, if any...
#install( TARGETS ${name}
#   RUNTIME DESTINATION bin
#   LIBRARY DESTINATION lib
#   ARCHIVE DESTINATION lib )
#install(FILES ${${name}_HDRS} DESTINATION include)
endif (BUILD_COMMON)


# from D:\UTILS\z88dk-fork\win32\getopt\getopt.vcxproj
if (BUILD_GETOPT)
set(name getopt)
set(dir ext/getopt)
set( ${name}_SRCS
   ${dir}/getopt.c
   )
set( ${name}_HDRS
   ${dir}/getopt.h
   )
add_library( ${name} ${LIB_TYPE} ${${name}_SRCS} ${${name}_HDRS} )
list(APPEND add_LIBS ${name})
# deal with install, if any...
#install( TARGETS ${name}
#   RUNTIME DESTINATION bin
#   LIBRARY DESTINATION lib
#   ARCHIVE DESTINATION lib )
#install(FILES ${${name}_HDRS} DESTINATION include)
endif (BUILD_GETOPT)


# from D:\UTILS\z88dk-fork\win32\regex\regex.vcxproj
if (BUILD_REGEX)
set(name regex)
set(dir ext/regex)
set( ${name}_SRCS
   ${dir}/regcomp.c
   ${dir}/regerror.c
   ${dir}/regexec.c
   ${dir}/regfree.c
   )
set( ${name}_HDRS
   ${dir}/cclass.h
   ${dir}/cname.h
   ${dir}/regex.h
   ${dir}/regex2.h
   ${dir}/utils.h
   )
add_library( ${name} ${LIB_TYPE} ${${name}_SRCS} ${${name}_HDRS} )
list(APPEND add_LIBS ${name})
# deal with install, if any...
#install( TARGETS ${name}
#   RUNTIME DESTINATION bin
#   LIBRARY DESTINATION lib
#   ARCHIVE DESTINATION lib )
#install(FILES ${${name}_HDRS} DESTINATION include)
endif (BUILD_REGEX)


# from D:\UTILS\z88dk-fork\win32\UNIXem\UNIXem.vcxproj
if (BUILD_UNIXEM)
set(name UNIXem)
set(dir ext/UNIXem/src)
set( ${name}_SRCS
   ${dir}/atomic.c
   ${dir}/dirent.c
   ${dir}/dlfcn.c
   ${dir}/glob.c
   ${dir}/hostname.c
   ext/UNIXem/src/internal/util.c
   ${dir}/mmap.c
   ${dir}/resource.c
   ${dir}/setenv.c
   ${dir}/time.c
   ${dir}/uio.c
   ${dir}/unistd.c
   )
set( ${name}_HDRS
   ext/UNIXem/include/arpa/inet.h
   ext/UNIXem/include/asm/atomic.h
   ext/UNIXem/include/dirent.h
   ext/UNIXem/include/dlfcn.h
   ext/UNIXem/include/glob.h
   ext/UNIXem/include/netinet/in.h
   ext/UNIXem/include/sys/mman.h
   ext/UNIXem/include/sys/resource.h
   ext/UNIXem/include/sys/select.h
   ext/UNIXem/include/sys/socket.h
   ext/UNIXem/include/sys/time.h
   ext/UNIXem/include/sys/uio.h
   ext/UNIXem/include/unistd.h
   ext/UNIXem/include/unixem/arpa/inet.h
   ext/UNIXem/include/unixem/asm/atomic.h
   ext/UNIXem/include/unixem/dirent.h
   ext/UNIXem/include/unixem/dlfcn.h
   ext/UNIXem/include/unixem/glob.h
   ext/UNIXem/include/unixem/implicit_link.h
   ext/UNIXem/include/unixem/internal/safestr.h
   ext/UNIXem/include/unixem/internal/util.h
   ext/UNIXem/include/unixem/internal/winsock.h
   ext/UNIXem/include/unixem/netinet/in.h
   ext/UNIXem/include/unixem/setenv.h
   ext/UNIXem/include/unixem/sys/mman.h
   ext/UNIXem/include/unixem/sys/resource.h
   ext/UNIXem/include/unixem/sys/socket.h
   ext/UNIXem/include/unixem/sys/time.h
   ext/UNIXem/include/unixem/sys/uio.h
   ext/UNIXem/include/unixem/unistd.h
   ext/UNIXem/include/unixem/unixem.h
   )
add_library( ${name} ${LIB_TYPE} ${${name}_SRCS} ${${name}_HDRS} )
list(APPEND add_LIBS ${name})
# deal with install, if any...
#install( TARGETS ${name}
#   RUNTIME DESTINATION bin
#   LIBRARY DESTINATION lib
#   ARCHIVE DESTINATION lib )
#install(FILES ${${name}_HDRS} DESTINATION include)
endif (BUILD_UNIXEM)


# from D:\UTILS\z88dk-fork\win32\z80asm-common\z80asm-common.vcxproj
if (BUILD_Z80ASM_COMMON)
set(name z80asm-common)
set(dir src/common)
set( ${name}_SRCS
   ${dir}/die.c
   ${dir}/dirname.c
   ${dir}/fileutil.c
   ${dir}/objfile.c
   ${dir}/optparse.c
   ${dir}/strutil.c
   ${dir}/zutils.c
   )
set( ${name}_HDRS
   ${dir}/die.h
   ${dir}/dirname.h
   ${dir}/fileutil.h
   ${dir}/objfile.h
   ${dir}/strutil.h
   ${dir}/types.h
   ${dir}/zutils.h
   )
add_library( ${name} ${LIB_TYPE} ${${name}_SRCS} ${${name}_HDRS} )
list(APPEND add_LIBS ${name})
# deal with install, if any...
#install( TARGETS ${name}
#   RUNTIME DESTINATION bin
#   LIBRARY DESTINATION lib
#   ARCHIVE DESTINATION lib )
#install(FILES ${${name}_HDRS} DESTINATION include)
endif (BUILD_Z80ASM_COMMON)


#################################################
##### EXECUTABLES 19 #####
#################################################

# from D:\UTILS\z88dk-fork\win32\appmake\appmake.vcxproj
if (BUILD_APPMAKE)
set(name appmake)
set(dir src/appmake)
set( ${name}_SRCS
   ${dir}/abc80.c
   ${dir}/ace-tap.c
   ${dir}/appmake.c
   ${dir}/aquarius.c
   ${dir}/c128.c
   ${dir}/c7420.c
   ${dir}/cpc.c
   ${dir}/cpm2.c
   ${dir}/cpmdisk.c
   ${dir}/enterprise.c
   ${dir}/extract.c
   ${dir}/fat.c
   ${dir}/ff.c
   ${dir}/fp1100.c
   ${dir}/galaksija.c
   ${dir}/gb.c
   ${dir}/glue.c
   ${dir}/hex.c
   ${dir}/homelab.c
   ${dir}/inject.c
   ${dir}/kc.c
   ${dir}/lynx.c
   ${dir}/m5.c
   ${dir}/mamepp.c
   ${dir}/mameql.c
   ${dir}/mc.c
   ${dir}/msx.c
   ${dir}/mtx.c
   ${dir}/multi8.c
   ${dir}/mz.c
   ${dir}/mz2500.c
   ${dir}/nascom.c
   ${dir}/nec.c
   ${dir}/newbrain.c
   ${dir}/newext.c
   ${dir}/noop.c
   ${dir}/p2000.c
   ${dir}/pasopia7.c
   ${dir}/pc88.c
   ${dir}/pmd85.c
   ${dir}/px.c
   ${dir}/residos.c
   ${dir}/rex6000.c
   ${dir}/rk.c
   ${dir}/rom.c
   ${dir}/sc3000.c
   ${dir}/sms.c
   ${dir}/sorcerer.c
   ${dir}/sos.c
   ${dir}/spc1000.c
   ${dir}/svi.c
   ${dir}/tixx.c
   ${dir}/trs80.c
   ${dir}/tvc.c
   ${dir}/vector06c.c
   ${dir}/vg5k.c
   ${dir}/vz.c
   ${dir}/x07.c
   ${dir}/x1.c
   ${dir}/z1013.c
   ${dir}/z88.c
   ${dir}/z88shell.c
   ${dir}/z9001.c
   ${dir}/zx-util.c
   ${dir}/zx.c
   ${dir}/zx81.c
   ${dir}/zxn.c
   ${dir}/zxvgs.c
   )
set( ${name}_HDRS
   ${dir}/appmake.h
   ${dir}/cpmdisk.h
   ${dir}/diskio.h
   ${dir}/ff.h
   ${dir}/ffconf.h
   ${dir}/zx-util.h
   )
add_executable( ${name} ${${name}_SRCS} ${${name}_HDRS} )
if(add_LIBS)
    target_link_libraries( ${name} ${add_LIBS} )
endif ()
if (MSVC)
    set_target_properties( ${name} PROPERTIES DEBUG_POSTFIX d )
endif ()
#install( TARGETS ${name} DESTINATION bin )
endif (BUILD_APPMAKE)


# from D:\UTILS\z88dk-fork\win32\config\config.vcxproj
if (BUILD_CONFIG)
set(name config)
set(dir win32/config)
set( ${name}_SRCS
   ${dir}/main.c
   )
add_executable( ${name} ${${name}_SRCS})
if(add_LIBS)
    target_link_libraries( ${name} ${add_LIBS} )
endif ()
if (MSVC)
    set_target_properties( ${name} PROPERTIES DEBUG_POSTFIX d )
endif ()
#install( TARGETS ${name} DESTINATION bin )
endif (BUILD_CONFIG)


# from D:\UTILS\z88dk-fork\win32\sccz80\sccz80.vcxproj
if (BUILD_SCCZ80)
set(name sccz80)
set(dir src/sccz80)
set( ${name}_SRCS
   ${dir}/callfunc.c
   ${dir}/codegen.c
   ${dir}/const.c
   ${dir}/data.c
   ${dir}/declinit.c
   ${dir}/declparse.c
   ${dir}/error.c
   ${dir}/expr.c
   ${dir}/goto.c
   ${dir}/io.c
   ${dir}/lex.c
   ${dir}/main.c
   ${dir}/misc.c
   ${dir}/plunge.c
   ${dir}/preproc.c
   ${dir}/primary.c
   ${dir}/stmt.c
   ${dir}/sym.c
   ${dir}/while.c
   )
set( ${name}_HDRS
   ${dir}/ccdefs.h
   ${dir}/codegen.h
   ${dir}/data.h
   ${dir}/define.h
   ${dir}/io.h
   ${dir}/misc.h
   )
add_executable( ${name} ${${name}_SRCS} ${${name}_HDRS} )
if(add_LIBS)
    target_link_libraries( ${name} ${add_LIBS} )
endif ()
if (MSVC)
    set_target_properties( ${name} PROPERTIES DEBUG_POSTFIX d )
endif ()
#install( TARGETS ${name} DESTINATION bin )
endif (BUILD_SCCZ80)


# from D:\UTILS\z88dk-fork\win32\test-common\test-common.vcxproj
if (BUILD_TEST_COMMON)
set(name test-common)
set(dir ext/regex)
set( ${name}_SRCS
   ${dir}/regcomp.c
   ${dir}/regerror.c
   ${dir}/regexec.c
   ${dir}/regfree.c
   ext/Unity/src/unity.c
   src/common/die.c
   src/common/fileutil.c
   src/common/objfile.c
   src/common/optparse.c
   src/common/strutil.c
   src/common/t/t_die.c
   src/common/t/t_fileutil.c
   src/common/t/t_strutil.c
   src/common/t/t_types.c
   src/common/t/test.c
   src/common/zutils.c
   )
set( ${name}_HDRS
   ext/optparse/optparse.h
   ${dir}/regex.h
   ext/Unity/src/unity.h
   ext/Unity/src/unity_internals.h
   src/common/die.h
   src/common/fileutil.h
   src/common/objfile.h
   src/common/strutil.h
   src/common/t/test1.hh
   src/common/t/test2.hh
   src/common/types.h
   src/common/zutils.h
   )
add_executable( ${name} ${${name}_SRCS} ${${name}_HDRS} )
if(add_LIBS)
    target_link_libraries( ${name} ${add_LIBS} )
endif ()
if (MSVC)
    set_target_properties( ${name} PROPERTIES DEBUG_POSTFIX d )
endif ()
#install( TARGETS ${name} DESTINATION bin )
endif (BUILD_TEST_COMMON)


# from D:\UTILS\z88dk-fork\win32\z80asm\z80asm.vcxproj
if (BUILD_Z80ASM)
set(name z80asm)
set(dir src/z80asm)
set( ${name}_SRCS
   src/common/zutils.c
   ${dir}/codearea.c
   ${dir}/common.c
   ${dir}/directives.c
   ${dir}/error_func.c
   ${dir}/errors.c
   ${dir}/expr.c
   ${dir}/hist.c
   src/z80asm/lib/alloc.c
   src/z80asm/lib/array.c
   src/z80asm/lib/class.c
   src/z80asm/lib/dbg.c
   src/z80asm/lib/list.c
   src/z80asm/lib/minunit.c
   src/z80asm/lib/srcfile.c
   src/z80asm/lib/str.c
   src/z80asm/lib/strhash.c
   ${dir}/libfile.c
   ${dir}/listfile.c
   ${dir}/macros.c
   ${dir}/main.c
   ${dir}/model.c
   ${dir}/modlink.c
   ${dir}/module.c
   ${dir}/opcodes.c
   ${dir}/options.c
   ${dir}/parse.c
   ${dir}/scan.c
   ${dir}/sym.c
   ${dir}/symtab.c
   ${dir}/z80asm.c
   ${dir}/z80pass.c
   ${dir}/zobjfile.c
   )
set( ${name}_HDRS
   src/common/zutils.h
   src/config.h
   src/portability.h
   ${dir}/codearea.h
   ${dir}/common.h
   ${dir}/directives.h
   ${dir}/error_func.h
   ${dir}/errors.h
   ${dir}/expr.h
   ${dir}/expr_def.h
   ${dir}/hist.h
   src/z80asm/lib/alloc.h
   src/z80asm/lib/array.h
   src/z80asm/lib/class.h
   src/z80asm/lib/classhash.h
   src/z80asm/lib/classlist.h
   src/z80asm/lib/dbg.h
   src/z80asm/lib/init.h
   src/z80asm/lib/list.h
   src/z80asm/lib/minunit.h
   src/z80asm/lib/queue.h
   src/z80asm/lib/srcfile.h
   src/z80asm/lib/str.h
   src/z80asm/lib/strhash.h
   ${dir}/libfile.h
   ${dir}/listfile.h
   ${dir}/macros.h
   ${dir}/model.h
   ${dir}/modlink.h
   ${dir}/module.h
   ${dir}/opcodes.h
   ${dir}/options.h
   ${dir}/options_def.h
   ${dir}/parse.h
   ${dir}/parse_rules.h
   ${dir}/scan.h
   ${dir}/scan_def.h
   ${dir}/scan_rules.h
   ${dir}/sym.h
   ${dir}/symbol.h
   ${dir}/symtab.h
   ${dir}/tokens.h
   ${dir}/z80asm.h
   ${dir}/zobjfile.h
   )
add_executable( ${name} ${${name}_SRCS} ${${name}_HDRS} )
if(add_LIBS)
    target_link_libraries( ${name} ${add_LIBS} )
endif ()
if (MSVC)
    set_target_properties( ${name} PROPERTIES DEBUG_POSTFIX d )
endif ()
#install( TARGETS ${name} DESTINATION bin )
endif (BUILD_Z80ASM)


# from D:\UTILS\z88dk-fork\win32\z80asm2\z80asm2.vcxproj
if (BUILD_Z80ASM2)
set(name z80asm2)
set(dir src/z80asm/dev/z80asm2)
set( ${name}_SRCS
   ext/UNIXem/src/dirent.c
   ext/UNIXem/src/glob.c
   src/common/die.c
   src/common/zutils.c
   ${dir}/backend.c
   ${dir}/frontend.c
   ${dir}/utils.c
   ${dir}/z80asm2.c
   )
set( ${name}_HDRS
   src/common/zutils.h
   ${dir}/backend.h
   ${dir}/frontend.h
   ${dir}/utils.h
   )
add_executable( ${name} ${${name}_SRCS} ${${name}_HDRS} )
if(add_LIBS)
    target_link_libraries( ${name} ${add_LIBS} )
endif ()
if (MSVC)
    set_target_properties( ${name} PROPERTIES DEBUG_POSTFIX d )
endif ()
#install( TARGETS ${name} DESTINATION bin )
endif (BUILD_Z80ASM2)


# from D:\UTILS\z88dk-fork\win32\z80nm\z80nm.vcxproj
if (BUILD_Z80NM)
set(name z80nm)
set(dir src/common)
set( ${name}_SRCS
   ${dir}/zutils.c
   src/z80nm/ar.c
   )
set( ${name}_HDRS
   ${dir}/zutils.h
   )
add_executable( ${name} ${${name}_SRCS} ${${name}_HDRS} )
if(add_LIBS)
    target_link_libraries( ${name} ${add_LIBS} )
endif ()
if (MSVC)
    set_target_properties( ${name} PROPERTIES DEBUG_POSTFIX d )
endif ()
#install( TARGETS ${name} DESTINATION bin )
endif (BUILD_Z80NM)


# from D:\UTILS\z88dk-fork\win32\copt\copt.vcxproj
if (BUILD_Z88DK_COPT)
set(name z88dk-copt)
set(dir src/copt)
set( ${name}_SRCS
   ${dir}/copt.c
   src/copt/regex/regcomp.c
   src/copt/regex/regerror.c
   src/copt/regex/regexec.c
   src/copt/regex/regfree.c
   )
set( ${name}_HDRS
   src/copt/regex/cclass.h
   src/copt/regex/cname.h
   src/copt/regex/engine.h
   src/copt/regex/regcomp.h
   src/copt/regex/regerror.h
   src/copt/regex/regex.h
   src/copt/regex/regex2.h
   src/copt/regex/utils.h
   )
add_executable( ${name} ${${name}_SRCS} ${${name}_HDRS} )
if(add_LIBS)
    target_link_libraries( ${name} ${add_LIBS} )
endif ()
if (MSVC)
    set_target_properties( ${name} PROPERTIES DEBUG_POSTFIX d )
endif ()
#install( TARGETS ${name} DESTINATION bin )
endif (BUILD_Z88DK_COPT)


# from D:\UTILS\z88dk-fork\win32\z88dk-dis\z88dk-dis.vcxproj
if (BUILD_Z88DK_DIS)
set(name z88dk-dis)
set(dir src/ticks)
set( ${name}_SRCS
   ${dir}/disassembler_alg.c
   ${dir}/disassembler_main.c
   ${dir}/syms.c
   )
set( ${name}_HDRS
   ext/uthash/src/uthash.h
   ext/uthash/src/utlist.h
   ${dir}/cmds.h
   ${dir}/linenoise.h
   ${dir}/ticks.h
   ${dir}/utf8.h
   )
add_executable( ${name} ${${name}_SRCS} ${${name}_HDRS} )
if(add_LIBS)
    target_link_libraries( ${name} ${add_LIBS} )
endif ()
if (MSVC)
    set_target_properties( ${name} PROPERTIES DEBUG_POSTFIX d )
endif ()
#install( TARGETS ${name} DESTINATION bin )
endif (BUILD_Z88DK_DIS)


# from D:\UTILS\z88dk-fork\win32\dzx7\dzx7.vcxproj
if (BUILD_Z88DK_DZX7)
set(name z88dk-dzx7)
set(dir src/zx7)
set( ${name}_SRCS
   ${dir}/dzx7.c
   )
add_executable( ${name} ${${name}_SRCS})
if(add_LIBS)
    target_link_libraries( ${name} ${add_LIBS} )
endif ()
if (MSVC)
    set_target_properties( ${name} PROPERTIES DEBUG_POSTFIX d )
endif ()
#install( TARGETS ${name} DESTINATION bin )
endif (BUILD_Z88DK_DZX7)


# from D:\UTILS\z88dk-fork\win32\z88dk-lib\z88dk-lib.vcxproj
if (BUILD_Z88DK_LIB)
set(name z88dk-lib)
set(dir src/z88dk-lib)
set( ${name}_SRCS
   ${dir}/z88dk-lib.c
   )
set( ${name}_HDRS
   ${dir}/dirent.h
   )
add_executable( ${name} ${${name}_SRCS} ${${name}_HDRS} )
if(add_LIBS)
    target_link_libraries( ${name} ${add_LIBS} )
endif ()
if (MSVC)
    set_target_properties( ${name} PROPERTIES DEBUG_POSTFIX d )
endif ()
#install( TARGETS ${name} DESTINATION bin )
endif (BUILD_Z88DK_LIB)


# from D:\UTILS\z88dk-fork\win32\z88dk-map\z88dk-map.vcxproj
if (BUILD_Z88DK_MAP)
set(name z88dk-map)
set(dir src/z88dk-map)
set( ${name}_SRCS
   ${dir}/z88dk-map.c
   )
add_executable( ${name} ${${name}_SRCS})
if(add_LIBS)
    target_link_libraries( ${name} ${add_LIBS} )
endif ()
if (MSVC)
    set_target_properties( ${name} PROPERTIES DEBUG_POSTFIX d )
endif ()
#install( TARGETS ${name} DESTINATION bin )
endif (BUILD_Z88DK_MAP)


# from D:\UTILS\z88dk-fork\win32\ticks\ticks.vcxproj
if (BUILD_Z88DK_TICKS)
set(name z88dk-ticks)
set(dir src/ticks)
set( ${name}_SRCS
   ${dir}/debugger.c
   ${dir}/disassembler_alg.c
   ${dir}/hook.c
   ${dir}/hook_console.c
   ${dir}/hook_cpm.c
   ${dir}/hook_io.c
   ${dir}/hook_misc.c
   ${dir}/linenoise.c
   ${dir}/memory.c
   ${dir}/syms.c
   ${dir}/ticks.c
   ${dir}/utf8.c
   )
set( ${name}_HDRS
   ext/uthash/src/uthash.h
   ${dir}/cmds.h
   ${dir}/linenoise.h
   ${dir}/ticks.h
   ${dir}/utf8.h
   )
add_executable( ${name} ${${name}_SRCS} ${${name}_HDRS} )
if(add_LIBS)
    target_link_libraries( ${name} ${add_LIBS} )
endif ()
if (MSVC)
    set_target_properties( ${name} PROPERTIES DEBUG_POSTFIX d )
endif ()
#install( TARGETS ${name} DESTINATION bin )
endif (BUILD_Z88DK_TICKS)


# from D:\UTILS\z88dk-fork\win32\ucpp\ucpp.vcxproj
if (BUILD_Z88DK_UCPP)
set(name z88dk-ucpp)
set(dir src/ucpp)
set( ${name}_SRCS
   ${dir}/assert.c
   ${dir}/cpp.c
   ${dir}/eval.c
   ${dir}/lexer.c
   ${dir}/macro.c
   ${dir}/mem.c
   ${dir}/nhash.c
   )
set( ${name}_HDRS
   ${dir}/arith.h
   ${dir}/config.h
   ${dir}/cpp.h
   ${dir}/hash.h
   ${dir}/mem.h
   ${dir}/nhash.h
   ${dir}/tune.h
   ${dir}/ucppi.h
   )
add_executable( ${name} ${${name}_SRCS} ${${name}_HDRS} )
if(add_LIBS)
    target_link_libraries( ${name} ${add_LIBS} )
endif ()
if (MSVC)
    set_target_properties( ${name} PROPERTIES DEBUG_POSTFIX d )
endif ()
#install( TARGETS ${name} DESTINATION bin )
endif (BUILD_Z88DK_UCPP)


# from D:\UTILS\z88dk-fork\win32\zcpp\zcpp.vcxproj
if (BUILD_Z88DK_ZCPP)
set(name z88dk-zcpp)
set(dir src/cpp)
set( ${name}_SRCS
   ${dir}/cpp1.c
   ${dir}/cpp2.c
   ${dir}/cpp3.c
   ${dir}/cpp4.c
   ${dir}/cpp5.c
   ${dir}/cpp6.c
   )
set( ${name}_HDRS
   ${dir}/cpp.h
   ${dir}/cppdef.h
   )
add_executable( ${name} ${${name}_SRCS} ${${name}_HDRS} )
if(add_LIBS)
    target_link_libraries( ${name} ${add_LIBS} )
endif ()
if (MSVC)
    set_target_properties( ${name} PROPERTIES DEBUG_POSTFIX d )
endif ()
#install( TARGETS ${name} DESTINATION bin )
endif (BUILD_Z88DK_ZCPP)


# from D:\UTILS\z88dk-fork\win32\zpragma\zpragma.vcxproj
if (BUILD_Z88DK_ZPRAGMA)
set(name z88dk-zpragma)
set(dir src/zpragma)
set( ${name}_SRCS
   ${dir}/zpragma.c
   )
add_executable( ${name} ${${name}_SRCS})
if(add_LIBS)
    target_link_libraries( ${name} ${add_LIBS} )
endif ()
if (MSVC)
    set_target_properties( ${name} PROPERTIES DEBUG_POSTFIX d )
endif ()
#install( TARGETS ${name} DESTINATION bin )
endif (BUILD_Z88DK_ZPRAGMA)


# from D:\UTILS\z88dk-fork\win32\zx7\zx7.vcxproj
if (BUILD_Z88DK_ZX7)
set(name z88dk-zx7)
set(dir src/zx7)
set( ${name}_SRCS
   ${dir}/compress.c
   ${dir}/optimize.c
   ${dir}/zx7.c
   )
set( ${name}_HDRS
   ${dir}/zx7.h
   )
add_executable( ${name} ${${name}_SRCS} ${${name}_HDRS} )
if(add_LIBS)
    target_link_libraries( ${name} ${add_LIBS} )
endif ()
if (MSVC)
    set_target_properties( ${name} PROPERTIES DEBUG_POSTFIX d )
endif ()
#install( TARGETS ${name} DESTINATION bin )
endif (BUILD_Z88DK_ZX7)


# from D:\UTILS\z88dk-fork\win32\zcc\zcc.vcxproj
if (BUILD_ZCC)
set(name zcc)
set(dir src/zcc)
set( ${name}_SRCS
   src/copt/regex/regcomp.c
   src/copt/regex/regerror.c
   src/copt/regex/regexec.c
   src/copt/regex/regfree.c
   ${dir}/zcc.c
   )
set( ${name}_HDRS
   src/copt/regex/cclass.h
   src/copt/regex/cname.h
   src/copt/regex/engine.h
   src/copt/regex/regcomp.h
   src/copt/regex/regerror.h
   src/copt/regex/regex.h
   src/copt/regex/regex2.h
   src/copt/regex/utils.h
   ${dir}/zcc.h
   )
add_executable( ${name} ${${name}_SRCS} ${${name}_HDRS} )
if(add_LIBS)
    target_link_libraries( ${name} ${add_LIBS} )
endif ()
if (MSVC)
    set_target_properties( ${name} PROPERTIES DEBUG_POSTFIX d )
endif ()
#install( TARGETS ${name} DESTINATION bin )
endif (BUILD_ZCC)


# from D:\UTILS\z88dk-fork\win32\zobjcopy\zobjcopy.vcxproj
if (BUILD_ZOBJCOPY)
set(name zobjcopy)
set(dir src/zobjcopy)
set( ${name}_SRCS
   src/common/zutils.c
   ${dir}/zobjcopy.c
   )
set( ${name}_HDRS
   src/common/zutils.h
   ${dir}/zobjcopy.h
   )
add_executable( ${name} ${${name}_SRCS} ${${name}_HDRS} )
target_include_directories( ${name} PRIVATE 
    <BUILD_INTERFACE:ext/optparse>
    <BUILD_INTERFACE:ext/regex>
    <BUILD_INTERFACE:ext/UNIXem/include>
    <BUILD_INTERFACE:ext/uthash/src>
    <BUILD_INTERFACE:src/common>
    <BUILD_INTERFACE:win32/z80asm>)
if(add_LIBS)
    target_link_libraries( ${name} ${add_LIBS} )
endif ()
if (MSVC)
    set_target_properties( ${name} PROPERTIES DEBUG_POSTFIX d )
endif ()
#install( TARGETS ${name} DESTINATION bin )
endif (BUILD_ZOBJCOPY)


# eof
