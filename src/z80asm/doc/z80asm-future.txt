  z80asm-future.md

                z80asm - Z80 module assembler, linker, librarian

   z80asm is part of the [1]z88dk project and is used as the back-end of the
   z88dk C compilers. It is not to be confused with other non-z88dk related
   projects with the same name.

   z80asm is a relocatable assembler, linker and librarian that can assemble
   Intel 8080/8085 and [2]Z80 -family assembly files into a relocatable
   object format, can manage sets of object files in libraries and can build
   binary images by linking these object files together. The binary images
   can be defined in different sections, to match the target architecture.

   ══════════════════════════════════════════════════════════════════════════

   [3](top) [4](keywords) [5](index)

1. Usage ...

   ══════════════════════════════════════════════════════════════════════════

   [6](top) [7](keywords) [8](index)

  1.1. ... as pre-processor

 z80asm -E [options] file...

   When called with the -E option, z80asm pre-processes each input file and
   stores the result in files with the .i extension, with all macros
   expanded, include files expanded, and constants converted to hexadecimal.

   ══════════════════════════════════════════════════════════════════════════

   [9](top) [10](keywords) [11](index)

  1.2. ... as assembler

 z80asm [options] file...

   By default, i.e. without any options, z80asm assembles each of the listed
   files into relocatable object files with a .o extension. It shows a
   summary of all the options when called without arguments.

   ══════════════════════════════════════════════════════════════════════════

   [12](top) [13](keywords) [14](index)

  1.3. ... as linker

 z80asm -b [options] file...

   When called with the [15]-b option, z80asm links the object files together
   into a set of binary files.

   ══════════════════════════════════════════════════════════════════════════

   [16](top) [17](keywords) [18](index)

  1.4. ... as librarian

 z80asm -xlibrary.lib [options] file...

   When called with the [19]-x option, z80asm builds a library containing all
   the object files passed as argument. That library can then be used during
   linking by specifying it with the [20]-i option.

   ══════════════════════════════════════════════════════════════════════════

   [21](top) [22](keywords) [23](index)

2. Options

   ══════════════════════════════════════════════════════════════════════════

   [24](top) [25](keywords) [26](index)

  2.1. General Options

   ══════════════════════════════════════════════════════════════════════════

   [27](top) [28](keywords) [29](index)

    2.1.1. -v (verbose)

   The [30]-v options causes z80asm to tell what is happening by messages
   sent to stdout.

   ══════════════════════════════════════════════════════════════════════════

   [31](top) [32](keywords) [33](index)

  2.2. Preprocessor options

   ══════════════════════════════════════════════════════════════════════════

   [34](top) [35](keywords) [36](index)

    2.2.1. -atoctal (at is octal prefix)

   By default the at-character (@) is used as a binary number prefix.

   With the option [37]-atoctal it is used as the octal number prefix
   instead.

   ══════════════════════════════════════════════════════════════════════════

   [38](top) [39](keywords) [40](index)

    2.2.2. -dotdirective (period is directive prefix)

   By default the period (.) is used to signal that the next identifier is a
   label.

   With the option [41]-dotdirective it is used instead to signal that the
   next identifier is an assembler directive.

   ══════════════════════════════════════════════════════════════════════════

   [42](top) [43](keywords) [44](index)

    2.2.3. -hashhex (hash is hex prefix)

   By default the hash-character (#) is used to signal that the next
   expression should be compiled as an immediate value. This meaning,
   although common in assemblers, is a no-operation in z80asm.

   With the option [45]-hashhex the hash-character is used as the hexadecimal
   number prefix instead.

   ══════════════════════════════════════════════════════════════════════════

   [46](top) [47](keywords) [48](index)

    2.2.4. -labelcol1 (labels at column 1)

   By default z80asm needs either a period (.) prefix (but see
   [49]-dotdirective ) or a colon (:) suffix to signal that an identifier is
   a label, and white space at the beginning of a line is not significant.

   With the option [50]-labelcol1 an identifier is a label if started at
   column 1, or a directive or opcode if started after white space.

   ══════════════════════════════════════════════════════════════════════════

   [51](top) [52](keywords) [53](index)

    2.2.5. -ucase (upper case)

   By default z80asm is case-sensitive for identifiers, but case-insensitive
   for assembly keywords (opcodes, directives, registers and flags).

   The option [54]-ucase causes z80asm to convert all the symbols to
   upper-case, so that code that assumes case-insentivity can be assembled.

   ══════════════════════════════════════════════════════════════════════════

   [55](top) [56](keywords) [57](index)

    2.2.6. -IXIY (swap IX and IY)

   This option causes the IX and IY register roles to be swapped, i.e.
   references to IX are assembled as IY and vice-versa. Useful when the
   assembler is used as a back-end of a compiler that uses one of the index
   registers that is used in the target platform.

   ══════════════════════════════════════════════════════════════════════════

   [58](top) [59](keywords) [60](index)

  2.3. Assembly options

   ══════════════════════════════════════════════════════════════════════════

   [61](top) [62](keywords) [63](index)

    2.3.1. -noprec (no precedence in expression evaluation)

   By default z80asm follows the C-precedence rules while evaluating
   expressions:

   Pecedence Operators                Description               Associativity
   1         **         Power                                   right-to-left
   2         + - #      Unary plus, unary minus, immediate      right-to-left
   3         ! ~        Logical NOT and bitwise NOT             right-to-left
   4         * / %      Multiply, divide and remainder          left-to-right
   5         + -        Add and subtract                        left-to-right
   6         << >>      Bitwise left-shift and right-shift      left-to-right
   7         < <= > >=  Less, Less-equal, greater,              left-to-right
                        greater-equal
   8         = == != <> Equal (two forms), Not equal (two       left-to-right
                        forms)
   9         &          Bitwise AND                             left-to-right
   10        ^          Bitwise XOR                             left-to-right
   11        |          Bitwise OR                              left-to-right
   12        &&         Logical AND                             left-to-right
   13        ^^         Logical XOR                             left-to-right
   14        ||         Logical OR                              left-to-right
   15        ?:         Ternary conditional                     right-to-left

   With the [64]-noprec expressions are evaluated strictly left-to-right.

   ══════════════════════════════════════════════════════════════════════════

   [65](top) [66](keywords) [67](index)

3. Input Files

   z80asm reads text files in the syntax supported by the specific processor
   being assembled for (see [68]-m option) and produces the corresponding
   object files.

   An input file with a .o extension is assumed to be already in object file
   format and is just read by the linker. Any other extension is considered
   an assembly source file (conventionally .asm).

   A project list file may be supplied in the command line prefixed by the
   at-sign (e.g. @project.lst). The list file contains one input file name
   per line, or another project list prefixed with an at-sign, which is
   opened recursively. Hash signs (#) and semi-colons (;) may be used at the
   start of lines in the list files to include comments.

   Both the command line and the list files support wild-cards to expand all
   the files that match the given pattern.

   Note that the Operating System may do its own wildcard expansion and the
   pattern may need to be quoted in the command line.

   A single star in a file name (*) expands to the list of all
   files/directories that match the complete pattern, where the star
   represents any sequence of characters. A double-star in a directory name
   (**) expands to the complete directory sub-tree, when searched
   recursively.

   ══════════════════════════════════════════════════════════════════════════

   [69](top) [70](keywords) [71](index)

  3.1. Source File Format

   The assembler parses source files with any of the common end-of-line
   termination sequences ("\r", "\n" or "\r\n"). Each line starts with an
   optional label and can contain assembly directives (i.e. instructions to
   the assembler), assembly instructions (i.e. code to be translated into
   object code for the specific processor) or blanks and comments.

   A single backslash character (\) may be used to separate multiple
   statements in a single line.

 org 0                     ; assembly directive
 start: push bc\pop hl     ; define a label and add two assembly opcodes
 ret                       ; assembly opcode can be at the first column

   Differently to most other assemblers, white space is not significant, i.e.
   a label can be defined after white space, and an opcode can be written at
   column 1 (but see option [72]-labelcol1 ).

   ══════════════════════════════════════════════════════════════════════════

   [73](top) [74](keywords) [75](index)

  3.2. Comments

   Comments may start with a semi-colon (;) or two slashes (//) and end at
   the end of the line, or may start with slash-star (/*) and end with
   star-slash (*/), possibly spanning multiple lines.

 ld a, 1                   ; this is a comment
 ld b, 2                   // another comment
 ld c, /* multi-line comment is valid
          in the middle of an instruction
       */ 3                ; C = 3

   ══════════════════════════════════════════════════════════════════════════

   [76](top) [77](keywords) [78](index)

  3.3. Symbols

   All symbols in the code (labels, variables, ...) are named with unique
   identifiers. Identifiers start with a letter or underscore (_), and can
   contain letters, digits, underscores or periods (.). Identifiers are
   case-sensitive (but see option [79]-ucase ).

   ══════════════════════════════════════════════════════════════════════════

   [80](top) [81](keywords) [82](index)

  3.4. Labels

   A label is a symbol that represents the current assembly address (ASMPC)
   and is defined at the start of a line by prefixing a symbol with a period
   (.) (but see [83]-dotdirective ) or suffixing it with a colon (:), i.e.
   either .label or label: (but see [84]-labelcol1 ).

   ══════════════════════════════════════════════════════════════════════════

   [85](top) [86](keywords) [87](index)

  3.5. Numbers

   The assembler accepts numbers in decimal, hexadecimal, octal and binary.
   Different syntaxes are allowed to simplify porting code written for other
   assemblers. Some of the prefix characters are also used as operators; in
   this case a space may be needed to signal the difference, e.g.

 ld a, %10     ; A = 2 (10 binary)
 ld a, 12 % 10 ; A = 2 (remainder of 12 divided by 10)

   All expressions are computed as signed integers with the host platform's
   integer size (32-bit or 64-bit in the most common platforms). Expression
   evaluation follows the operator precedence of C (but see [88]-noprec ).

   The underscore can be used to separate groups of digits to help
   readability, e.g. 0xFFFF_FFFF is the same as 0xFFFFFFFF.

   Floating point numbers can be supplied with the FLOAT directive, that
   encodes them in the current floating point format in the object code.
   Floating point numbers must be supplied in decimal base and have an
   integer part and a fractional part separated by a period, followed by an
   optional e (exponent), a plus or minus sign, and the power of 10 to
   multiply to the base.

   ══════════════════════════════════════════════════════════════════════════

   [89](top) [90](keywords) [91](index)

    3.5.1. Decimal

   Decimal numbers are a sequence of decimal digits (0..9), optionally
   followed by a d or D - all prefixes and suffixes are case-insensitive.
   Leading zeros are insignificant - note the difference from C, where a
   leading zero means octal.

 ld a, 99
 ld a, 99d

   ══════════════════════════════════════════════════════════════════════════

   [92](top) [93](keywords) [94](index)

    3.5.2. Hexadecimal

   Hexadecimal numbers are a sequence of hexadecimal digits (0..9 and A..F,
   case-insensitive), either prefixed or suffixed with an hexadecimal marker.
   If the marker is a suffix, and the number starts with a letter, then a
   leading zero has to be added.

   The hexadecimal prefix $ is also the ASMPC identifier if not followed by a
   hexadecimal number, i.e. the address of the instruction being assembled.

   The hexadecimal prefix # is only recognized with the option [95]-hashhex .

 ld a, $FF
 ld a, #FF           ; only with option  [-hashhex](#2_2_3_)
 ld a, 0xFF
 ld a, 0FFh

   ══════════════════════════════════════════════════════════════════════════

   [96](top) [97](keywords) [98](index)

    3.5.3. Octal

   Octal numbers are a sequence of octal digits (0..7), either prefixed or
   suffixed with an octal marker.

   The octal-prefix @ is only recognized with the option [99]-atoctal .

 ld a, @77           ; only with option  [-atoctal](#2_2_1_)
 ld a, 0o77
 ld a, 0q77
 ld a, 77o
 ld a, 77q

   ══════════════════════════════════════════════════════════════════════════

   [100](top) [101](keywords) [102](index)

    3.5.4. Binary

   Binary numbers are a sequence of binary digits (0..1), either prefixed or
   suffixed with a binary marker.

   The binary prefix % is also the modulus operator, if not followed by a
   binary digit.

   The binary prefix @ is recognized unless the option [103]-atoctal is
   given.

 ld a, %11
 ld a, @11           ; except with option  [-atoctal](#2_2_1_)
 ld a, 0b11
 ld a, 11b

   ══════════════════════════════════════════════════════════════════════════

   [104](top) [105](keywords) [106](index)

    3.5.5. Bitmaps

   Binary numbers can be specified as bitmaps, with # as 1 and - as 0, using
   the binary prefix (@ or %) immediately followed by a double-quoted string
   of hashes and dashes.

 defb @"---##---"
 defb @"-##--##-"
 defb %"-##-----"
 defb %"-##-----"
 defb @"-##--##-"
 defb @"---##---"

   ══════════════════════════════════════════════════════════════════════════

   [107](top) [108](keywords) [109](index)

  3.6. Keywords

   Processor registers (BC, DE, ...) and flags (NZ, Z, ...), and assembly
   ASMPC, representing the current assembly location, are reserved keywords.
   They cannot be used as identifiers, and are case-insensitive.

   ══════════════════════════════════════════════════════════════════════════

   [110](top) [111](keywords) [112](index)

  3.7. Directives and Opcodes

   Assembler directives ( [113]ORG , [114]INCLUDE , ...) and processor
   opcodes (NOP, LD, ...) are interpreted as directives or opcodes when
   appearing at the start of the statement or after a label definition, or as
   regular identifiers otherwise. The directives and opcodes are
   case-insensitive.

 jr: jr jr  ; silly example, jr is both a label and an opcode
            ; while correct code, it's confusing, don't do it

   ══════════════════════════════════════════════════════════════════════════

   [115](top) [116](keywords) [117](index)

4. Object File Format

   The object and library files are stored in binary form as a set of
   contiguous sections. The files are cross-platform compatible, i.e. they
   can be created in a big-endian architecture and used in a little-endian
   one.

   The files start with a signature and a version number.

   A set of file pointers at the start of the object file point to the start
   of each section existing the in the file, or contain 0xFFFFFFFF (-1) if
   that section does not exist.

   The following object types exist in the file:

    Type   Size (bytes)                      Description
   char    1            ASCII character
   byte    1            unsigned 8-bit value
   word    2            unsigned 16-bit value, little-endian ( [118]Z80
                        /Intel)
   dword   4            signed 32-bit value, little-endian ( [119]Z80 /Intel)
   string  1+length     one byte with the string length followed by the
                        characters of the string
   lstring 2+length     one word with the string length followed by the
                        characters of the string

   ══════════════════════════════════════════════════════════════════════════

   [120](top) [121](keywords) [122](index)

  4.1. Object Files

   The format of the object files is as follows:

    Addr       Type       Value                   Description
   0       char[8]      "Z80RMF14" File signature and version
   8       dword        pmodule    File pointer to Module Name, always the
                                   last section
   12      dword        pexpr      File pointer to Expressions, may be -1
   16      dword        pnames     File pointer to Defined Symbols, may be -1
   20      dword        pextern    File pointer to External Symbols, may be
                                   -1
   24      dword        pcode      File pointer to Code Sections, may be -1
   pexpr                           Expressions: set of expressions up to end
                                   marker
           char         type       Type of expression
                        0          end marker
                        'U'        8-bit integer (0 to 255)
                        'S'        8-bit signed integer (-128 to 127)
                        'u'        8-bit integer (0 to 255) extended to 16
                                   bits
                        's'        8-bit signed integer (-128 to 127)
                                   sign-extended to 16 bits
                        'C'        16-bit integer, little-endian (-32768 to
                                   65535)
                        'B'        16-bit integer, big-endian (-32768 to
                                   65535)
                        'P'        24-bit signed integer
                        'L'        32-bit signed integer
                        'J'        8-bit jump relative offset
                        '='        Computed name at link time
                                   Source file name of expression definition,
           lstring      sourcefile empty to reuse same from previous
                                   expression
           dword        linenumber Line number in source file of expression
                                   definition
           string       section    Section name of expression definition
                                   Relative module code address of the start
           word         ASMPC      of the assembly instruction to be used as
                                   ASMPC during expression evaluation
                                   Relative module code patch pointer to
           word         patchptr   store the result of evaluating the
                                   expression
                                   Name of the symbol that receives the
           string       targetname result of evaluating the expression, only
                                   used for '=' type expressions, empty
                                   string for the other types
           lstring      expression Expression text as parsed from the source
                                   file
                                   ... repeat for every expression ...
   pnames                          Defined Symbols: set of defined symbols up
                                   to end marker
           char         scope      Scope of the symbol:
                        0          end marker
                        'L'        is local
                        'G'        is global
           char         type       Type of symbol:
                        'A'        Relocatable address
                        'C'        Constant
                                   Symbol computed at link time, the
                        '='        corresponding expression is in the
                                   Expressions section
           string       section    Section name of symbol definition
                                   Absolute value for a constant, or the
           dword        value      relative address to the start of the code
                                   block for a relocatable address
           string       name       Name of symbol
           string       sourcefile Source file name of symbol definition
           dword        linenumber Line number in source file of symnbol
                                   definition
                                   ... repeat for every symbol ...
   pextern                         External Symbols: set of external symbols
                                   referred in the module, up Module Name
           string       name       Name of external symbol
                                   ... repeat for every symbol ...
   pmodule string       modname    Module Name: Name of the module
   pcode                           Code Sections: set of sections of binary
                                   code, up to end marker
           dword        length     Code length, -1 to signal the end
           string       section    Section name of code
                                   User defined [123]ORG address for the
                                   start of this section, -1 for no [124]ORG
                                   address was defined, or -2 to split
                                   section to a different binary file. If
           dword        origin     multiple sections are given with an
                                   [125]ORG address each, the assembler
                                   generates one binary file for each section
                                   with a defined [126]ORG , followed by all
                                   sections without one.
                                   Address alignment of this section, -1 if
           dword        align      not defined. The previous section is
                                   padded to align the start address of this
                                   section.
           byte[length] code       Binary code
                                   ... repeat for every section ...

   ══════════════════════════════════════════════════════════════════════════

   [127](top) [128](keywords) [129](index)

  4.2. Library File Format

   The library file format is a sequence of object files with additional
   structures.

   Addr     Type       Value                     Description
   0    char[8]      "Z80LMF14" File signature and version
   obj                          Object File Block, repeats for every object
                                module
        dword        next       File pointer of the next object file in the
                                library, -1 if this is the last one
                                Length of this object file, or 0 if this
        dword        length     object files has been marked "deleted" and
                                will not be used
        byte[length] obj        Object file
                                ... repeat for every object file ...

   ══════════════════════════════════════════════════════════════════════════

   [130](top) [131](keywords) [132](index)

  4.3. Format History

   Version                              Commment
   01      original z80asm version
   02      allow expressions to use standard C operators instead of the
           original (legacy) z80asm specific syntax.
           include the address of the start of the assembly instruction in
   03      the object file, so that expressions with ASMPC are correctly
           computed at link time; remove type 'X' symbols (global library),
           no longer used.
   04      include the source file location of expressions in order to give
           meaningful link-time error messages.
   05      include source code sections.
   06      incomplete implementation, fixed in version 07
           include [133]DEFC symbols that are defined as an expression using
   07      other symbols and are computed at link time, after all addresses
           are allocated.
   08      include a user defined [134]ORG address per section.
   09      include the file and line number where each symbol was defined.
   10      allow a section alignment to be defined.
   11      allow big-endian 16-bit expressions to be patched; these
           big-endian values are used in the ZXN coper unit.
   12      allow the target expression of relative jumps to be computed in
           the link phase
   13      add 8-bit signed and unsigned values extended to 16-bits
   14      add 24-bit pointers

   ══════════════════════════════════════════════════════════════════════════

   [135](top) [136](keywords) [137](index)

5. z80asm Syntax

                      THE [138]Z80 CROSS ASSEMBLER (z88dk)

   Version: v2.6.1 (October 3rd, 2014)

   Thank you for purchasing a copy of this cross assembler. We have made an
   effort to program an easy user interface and efficient assembler source
   file compiling. The object file and library format is an invention of our
   own and has also been included in this documentation. We hope that you
   will enjoy your [139]Z80 machine code programming with our assembler.

   We have made an effort to produce a fairly easy-to-understand
   documentation. If you have any comments or corrections, please don't
   hesitate to contact us:

   Gunther Strube
   Gl. Kongevej 37, 4.tv.
   DK-1610 Kobenhavn V
   Denmark
   e-mail [140]gbs@image.dk

1. Running the assembler

   Since assemblers are developed for programmers the user interface have
   been implemented according to the standard command line environment (CLI)
   used in most operating systems; however, if only a GUI interface is
   available (as in MacOS) then a command shell must be executed to allow
   standard command line input. The [141]Z80 Module Assembler command line
   interface may change if other programmers wish to implement a different
   interface to the assembler. You have the opportunity!

   ══════════════════════════════════════════════════════════════════════════

   [142](top) [143](keywords) [144](index)

  5.1. Help page

   When executing the assembler from the command line with the [145]-h
   option, a help page is displayed. The page shortly explains the syntax of
   parameter specification and which parameters are available.

   ══════════════════════════════════════════════════════════════════════════

   [146](top) [147](keywords) [148](index)

  5.2. Command line

   The syntax of the assembler parameters is a straightforward design.
   Filenames or a project file are always specified. The options may be left
   out:

 z80asm [options] <filename {filename}> | <@modulesfile>

   As seen above <options> must be specified first. Then you enter the names
   of all files to be assembled. You either choose to specify all file names
   or a @<project-file> containing all file names. File name may be specified
   with or without the 'asm extension. The correct filename parsing is
   handled automatically by the assembler. As seen on the syntax at least one
   source file must be specified and may be repeated with several file names.
   Only one project file may be specified if no source file names are given.

   Many of the parameters are preset with default values which gives an easy
   user interface when specifying the assembly parameters. Only advanced
   parameters need to be specified explicitly. The help page displays the
   default parameter values at the bottom of the page.

   ══════════════════════════════════════════════════════════════════════════

   [149](top) [150](keywords) [151](index)

  5.3. Command line options

   Options are used to control the assembly process and output. They are
   recognized by the assembler when you specify a leading minus before the
   option identifier ('-'). Options are always specified before file names or
   project files.

   When the assembler is executed options are all preset with default values
   and are either switched ON or OFF (active or not). All options have a
   single letter identification. Upper and lower case letters are
   distinguished, which means that 'a' might be different command than 'A'.
   If an option is to be turned off, you simply specify a 'n' before the
   identification, e.g. -nl which selects listing files not to be created by
   the assembler.

   ══════════════════════════════════════════════════════════════════════════

   [152](top) [153](keywords) [154](index)

    5.3.1. -h : Show help screen

   Shows a help screen with the available options.

   ══════════════════════════════════════════════════════════════════════════

   [155](top) [156](keywords) [157](index)

    5.3.2. -e<ext> : Use alternative source file extension

   The default assembler source file extension is ".asm". Using this option,
   you force the assembler to use another default extension, like ".opt" or
   ".as" for the source file.

   The extension is specified without the ".". Only three letters are
   accepted - the rest is discarded.

   ══════════════════════════════════════════════════════════════════════════

   [158](top) [159](keywords) [160](index)

    5.3.3. -M<ext> : Use alternative object file extension

   The default assembler object file extension is ".obj". Using this option,
   you force the assembler to use another default extension, like ".o" as the
   object file name extension.

   The extension is specified without the ".". Only three letters are
   accepted - the rest is discarded.

   ══════════════════════════════════════════════════════════════════════════

   [161](top) [162](keywords) [163](index)

    5.3.4. -l : Create listing file output

   The information in listing files is a combination of the original source
   file and additional information of the generated machine code. Further,
   the listing file is page formatted with a header specifying the date and
   time of the compilation, the filename of the listing and a page number.

   For each line of the source file the following information is written:

 <source file line number> <assembler address>
 <machine code hex dump> <source line>

   The machine code and assembler address output are written in hexadecimal
   notation. If the machine code uses more the 4 bytes, the source file line
   is written on the following line. This usually happens when you have
   defined a string constant or a relatively large amount of constant
   definitions.

   The assembler address is always beginning at zero, i.e. the beginning of
   the current modules' machine code. In a relocated context of the machine
   code, where all code is positioned at fixed addresses, you will have the
   opportunity to view the addresses of your code relative to the start of
   individual modules using the assembler output addresses. Further, the last
   assembler address can be interpreted as the size of the modules' generated
   machine code.

   Listing files also serves the purpose of a hard copy on paper of your
   programs, and are useful in a debugging phase (identifying opcodes versus
   the mnemonic representation of instructions).

   The creation of listing files imposes much more processing work of the
   assembler. If you want to compile your code as quickly as possible then
   don't create listing files. Listing files obtain their file name from the
   base of the source filename, and is added with the 'lst' extension.

   ══════════════════════════════════════════════════════════════════════════

   [164](top) [165](keywords) [166](index)

    5.3.5. -s : Create symbol table

   Symbol tables contains the integer form of symbolical names and constants
   that has been parsed and generated during a compilation of a source file.
   The structure of the symbol table is divided into two columns. The first
   contains the parsed symbol names, converted to uppercase. The second
   column contains the generated value of the symbol name.

   All symbol values are displayed in signed 32-bit hexadecimal notation.

   The two columns are separated by tabulators which represents a default
   value of 8 spaces per tabulator. The width of the symbol name column is
   defined as the tabulator distance multiplied by 4. The default width of
   the name column is 4 * 8 = 32 spaces.

   The symbol table will be written to the end of the appropriate listing
   file, if listing file and symbol table output is enabled. If no listing
   file output is enabled, the symbol table will be written to a separate
   file, identified with the base name of the source file module and given
   the 'sym' extension.

   ══════════════════════════════════════════════════════════════════════════

   [167](top) [168](keywords) [169](index)

    5.3.6. -d : Assemble only updated files

   Assemblers usually force compiles all specified files. This is also
   possible (as default) for the [170]Z80 Module Assembler. In large
   application project with 15 modules or more it can be quite frustrating to
   compile all every time. The solution is to only assemble updated files and
   leave the rest (since they have been compiled to the programmers
   knowledge).

   But in a long term view it is better to just compile a project without
   thinking of which files need to be compiled or not. That can be done with
   the [171]Z80 Module Assembler. By simply specifying the [172]-d parameter
   at the command line, only updated source files are assembled into object
   files - the rest are ignored.

   Using the [173]-d option in combination with a project file gives the best
   project setup for a large compilation; compile your projects without
   worrying about which module is updated or not.

   ══════════════════════════════════════════════════════════════════════════

   [174](top) [175](keywords) [176](index)

    5.3.7. -b : Link/relocate object files

   The [177]-b option must be used if you want to create an executable
   [178]Z80 machine code output file of your previously created object files.
   You may also use the [179]-a option which is identical in functionality
   but also includes the [180]-d option. In other words assemble only updated
   source modules and perform linking/relocation of the code afterwards.

     • Pass 1:
       When the linking process begins with the first object module, it is
       examined for an [181]ORG address to perform the absolute address
       relocation of all the object module machine code. The [182]ORG
       (loading address for memory) will have to be defined in the first
       source file module. If not, the assembler will prompt you for it on
       the command line. The [183]ORG address must be typed in hexadecimal
       notation. If you never use the [184]ORG directive in your source
       files, you can always explicitly define one at the command line with
       the [185]-r option.

       The next step in the linking process is loading of the machine code
       from each object module, in the order of the specified modules. Pass 1
       is completed with loading all local and global symbol definitions of
       the object modules. All relocatable address symbols are assigned the
       correct absolute memory location (based on [186]ORG ).

     • Pass 2:
       The address patching process. All expressions are now read and
       evaluated, then patched into the appropriate positions of the linked
       machine code.

       When all expressions have been evaluated the machine code is completed
       and saved to a file named as the first source file module, and
       assigned the 'bin' extension.

   ══════════════════════════════════════════════════════════════════════════

   [187](top) [188](keywords) [189](index)

    5.3.8. -a : Combine -d and -b

   Same as providing both [190]-b (link/relocate object files) and [191]-d
   (assemble only updated files).

   ══════════════════════════════════════════════════════════════════════════

   [192](top) [193](keywords) [194](index)

    5.3.9. -o<binary-filename> : Binary filename

   Define another filename for the compiled binary output than the default
   source filename of the project, appended with the ".bin" extension.

   ══════════════════════════════════════════════════════════════════════════

   [195](top) [196](keywords) [197](index)

    5.3.10. -m : Create address map information file

   When the linking process has been completed and the machine code saved to
   a file, the address map file is produced. This file contains the
   information of all relocated address symbols with their assigned absolute
   addresses. Further, an id is written that displays the scope of the
   symbols; local ('L') or global ('G'). The last item of each address map
   line, identified after the colon, is the name of the module which the
   symbol name belongs to.

   The address map file is divided into two sections; the first produces the
   symbol list in alphabetical order (fast lookup of symbol names), the
   second in order of their address counterparts. The section is more used
   during a debugging session when an address in a disassembly needs to be
   identified with a name. The second list also gives a chronological view
   (composition) of the linked modules.

   ══════════════════════════════════════════════════════════════════════════

   [198](top) [199](keywords) [200](index)

    5.3.11. -r<hex-address> : Re-define the ORG relocation address

   During the linking phase of the assembler the [201]ORG address that
   defines the position in memory where the code is to be loaded and
   executed, is fetched from the first object module file. You can override
   this by specifying an explicit address origin by entering the [202]-r
   option followed by an address in hexadecimal notation at the command line,
   e.g.:

 z80asm  [-b](#5_3_7_)  -r4000 file.asm

   which specifies that your code is to be relocated for address 4000h
   (16384) onwards.

   Using the [203]-r option supersedes a defined [204]ORG in the object file.
   You could for example have defined the [205]ORG to 8000h (32768) in your
   first source file, then compiled the project. This would have generated
   machine code for memory location 8000h (segment 2 in the Cambridge
   [206]Z88 ). Since the object files are generated it is easy to link them
   again with another [207]ORG address by just using the [208]-r option. The
   linking process does not alter the information in object files - they are
   only read. The same project could then easily be re-linked to another
   address, e.g.

 z80asm  [-b](#5_3_7_)  -r2000 file.asm

   ══════════════════════════════════════════════════════════════════════════

   [209](top) [210](keywords) [211](index)

    5.3.12. -R : Generate address independent code

   The [212]Z80 processor instruction set allows only relative jumps in
   maximum +/- 128 bytes using the JR and DJNZ instructions. Further, there
   is no program counter relative call-to-subroutine or jump-to-subroutine
   instruction. If you want a program to be address-independent no absolute
   address references may be used in jump or call instructions. If you want
   to program [213]Z80 address independent code you can only write small
   routines using the JR and DJNZ instructions. With a restricted interval of
   128 bytes you can imagine the size of those routines! Programming of large
   applications using address independency is simply impossible on the
   [214]Z80 processor with the basic instruction set available. You can only
   define a fixed address origin ( [215]ORG ) for your machine code to be
   loaded and executed from. However, there is one solution: before the code
   is executed an automatical address-relocation is performed to the current
   position in memory. This is done only once. The penalty is that the
   program fills more space in memory. This is unavoidable since information
   must be available to define where the address relocation has to be
   performed in the program. Further, a small routine must be included with
   the program to read the relocation information and patch it into the
   specified locations of the program. It is impossible to determine the
   extra size generated with a relocation table. We assume an extra size of 3
   - 3.5K for a typical 16K application program.

   You can generate address independent code using the [216]-R option
   accompanied with the [217]-a or [218]-b option. There is no other
   requirements. The relocatable code may be useful for programmers using the
   Cambridge [219]Z88 who want to use machine code in the BBC BASIC
   application environment. This can easily be interfaced with the DIM
   statement to allocate memory for the machine code program, and issue a
   [220]CALL or USR() to execute the machine code.

   Please note that the linking process with the [221]-R option addresses
   your code from 0 onwards. This is necessary when the runtime relocation is
   performed by the relocator (just before your program is executed). This
   can be examined by loading the address map file into a text editor.

   The principle of relocation is in fact a self-modifying program. You
   cannot relocate a program that has been blown into an EPROM (cannot be
   modified). You may only execute relocatable programs in dynamic memory
   (RAM).

   The relocator is built into the [222]Z80 Module Assembler. The relocation
   table is created during the linking phase. When all object modules have
   been linked and the appropriate machine code generated, the process is
   ended with first copying the relocator routine into the executable file,
   then a relocation table and finally the compiled machine code program. Any
   defined [223]ORG in your code is superseded - this is not necessary in a
   relocatable program!

   Two rules must be obeyed when using relocatable programs:

    1. The IY register must have been set up to point at the address where
       your program resides. The first code is in fact the relocator which
       manipulates your code on the basis of the IY register. If IY is not
       setup properly your machine code program will be relocated for an
       address it is not resided at. On execution your might then call a
       random address (on the basis of the random IY register).

    2. Don't use the alternate register set for parameter passing between the
       caller (of your code) in the main code and the relocated program. The
       following registers are affected by the initial relocation process:

 AFBCDEHL/IXIY/........ same
 ......../..../afbcdehl different

   You still have all the main registers for parameter passing which is more
   than sufficient for average programming.

   When your address-independent code is stored to the file, a message is
   displayed which informs the user of how many bytes the relocation header
   consists of. This constant is useful since it informs you of the distance
   between the relocation header and the start of your code. The map file
   automatically reflects the relocation header. All addresses of your code
   has been modified to include the relocation header. Please note that all
   addresses in the map file are defined from address 0. When your code is
   placed in an absolute memory address, and you need to perform a debugging
   session, you can find your specific label address by adding the constant
   from the map file to the memory origin of your code. The inbuilt relocator
   routine may be examined by extracting the "relocate.asm" file from the "
   [224]Z80 src.zip" compressed file resource.

   ══════════════════════════════════════════════════════════════════════════

   [225](top) [226](keywords) [227](index)

    5.3.13. -g : Create global address definition file

   With this option it is possible to generate a [228]DEFC directive
   definition file of all globally declared identifiers in a file project
   (declared with the [229]XDEF directive). These global definitions are
   calculated from the specified [230]ORG address (from first module or the
   [231]-r option). This feature is very useful, if you want to get access to
   routines from a separate compilation. If the two code compilation were
   placed in different banks of the [232]Z88 , it would be possible to know
   the correct address of a routine just by using the [233]DEFC address
   definition previously compiled. We used this facility to access routines
   in the two 8K halves of the segment 0 debugged version. This debugger
   actually swaps one of the two 8K blocks in and out of segment 0 when
   needed to call an 'external' routine. Applications on the [234]Z88 may
   only access the upper 8K of segment 0. A 16K application therefore needs
   to be split in 8K halves and paged in when needed to be run in this area.
   Tuff!

   ══════════════════════════════════════════════════════════════════════════

   [235](top) [236](keywords) [237](index)

    5.3.14. -D<symbol> : Define a static symbol

   This option is useful if you want to produce conditional compilations. The
   symbol defined here will be active throughout the compilation. We used
   this feature to compile machine code on different computer platforms (QL,
   IBM, LINUX or [238]Z88 ). Specify the symbol immediately after the option
   identifier, i.e.

 z80asm  [-b](#5_3_7_)  -DZ88 file.asm

   ══════════════════════════════════════════════════════════════════════════

   [239](top) [240](keywords) [241](index)

    5.3.15. @<project-file> :1.3.16. Using a project file

   Project files defines all file names of a project. The file name standard
   stored in a project file obeys the operating system notation.

   Instead of specifying every module file name at the command line, a simple
   reference of a project file can be made instead. According to the rules of
   the specification of parameters you specify either your source file
   modules or use a project file. The project file specification is of course
   much faster. An example:

 z80asm  [-a](#5_3_8_)  main pass1 pass2 link asmdrctv z80instr

   This command line will compile all specified module file names into a
   single executable file called "main.bin". However if a project file
   'assembler' were created already containing the same file names, the
   command line would have been:

 z80asm  [-a](#5_3_8_)  @assembler

   - much easier!

   A project file only contains file names. Each file name is separated by a
   newline character \n. The new line character may be different on various
   computer platforms - but the assembler interprets it correctly. The
   contents of a project file may look like this:

 z80asm
 z80pass1
 z80pass1
 modlink

   Project files are easily created using a simple text editor.

   ══════════════════════════════════════════════════════════════════════════

   [242](top) [243](keywords) [244](index)

    5.3.16. -i<library-file> : Include library modules during linking/relocation

   This option allows compilation time linking of external machine code,
   better known as library routines. Much, much programming time can be saved
   by producing a set of standard routines compiled into library files. These
   may then be included later in application project compilations. The
   command line option allows specification of several library files. For
   each library reference in an application module, all library files will be
   scanned for that particular module. The filename (inclusive directory
   path) of the library may be specified explicitly on the command line
   immediately after the [245]-i identifier. If you omit the filename, a
   default library filename will be used by the assembler. This default
   filename is defined by creating the environment variable " [246]Z80
   _STDLIB=<library-file>. Please refer to your operating system
   documentation on how to create environment variables.

   Library files are recognised by the ".lib" extension.

   ══════════════════════════════════════════════════════════════════════════

   [247](top) [248](keywords) [249](index)

    5.3.17. -L<library-path> : Add directory to search path for libraries

   Tells the assembler where to look for library files.

   ══════════════════════════════════════════════════════════════════════════

   [250](top) [251](keywords) [252](index)

    5.3.18. -I<include-path> : Add directory to search path for INCLUDE

   Tells the assembler where to look for [253]INCLUDE files.

   ══════════════════════════════════════════════════════════════════════════

   [254](top) [255](keywords) [256](index)

    5.3.19. -x : Create a library

   A library file is composed of object files surrounded by a few file
   structures. The library file format (and object file format) may be found
   at the end of this documentation. A library is simply a set of independent
   routines (that may refer to each other) put together in a sequential form.
   You may only specify a single [257]-x option on the command line. A
   filename may be explicitly defined (including device and path information)
   to determine the storage location of the library. As in [258]-i you may
   omit the filename to use the default filename identified by the " [259]Z80
   _STDLIB" environment variable. A library routine must be defined using a
   simple [260]XLIB directive with an identical address name label
   definition. Please refer to further information later in this
   documentation. The " [261]Z80 lib.zip" contains the standard library with
   all corresponding source files. Have a look at them - they clearly
   displays how to compose a library routine.

   One very important aspect of libraries is the time that the assembler
   spends searching through them. To optimize the search you should place
   your routines in a "topological" order, i.e. routines that access other
   library routines should be placed first. In most situations you avoid
   redundant sequential searching through the library.

   ══════════════════════════════════════════════════════════════════════════

   [262](top) [263](keywords) [264](index)

    5.3.20. -t<number> : Define tabulator distance for text output files

   To save storage space the [265]Z80 cross assembler output files (listing,
   map, symbol and [266]XDEF definition files) uses a tabulator control
   character instead of spaces. The benefit is about 30% compressed files.

   The tabulator distance defines the distance of space between each
   tabulator it represents. The default value is 8 spaces per tabulator.

   The tabulators are used to separate two columns of information. The first
   column contains a name of some sort. Since names have variable length, a
   size of the column is defined. The Assembler defines the size of the
   column by multiplying the current tabulator distance with 4, i.e. giving a
   default size of 4*8 = 32 'spaces'. This is usually more than enough for
   most name definitions parsed from source files.

   You may redefine the tabulator distance by using the [267]-t option
   immediately followed by a decimal number, e.g. -t4 for defining a
   tabulator distance of 4. The width of the first column will then be 4*4 =
   16 'spaces'.

   ══════════════════════════════════════════════════════════════════════════

   [268](top) [269](keywords) [270](index)

    5.3.21. -RCMX000 : Support the RCM2000/RCM3000 series of Z80-like CPU's

   This option disables assembly opcodes not available in the RCM2000/RCM3000
   series of [271]Z80 -like CPU's.

   ══════════════════════════════════════════════════════════════════════════

   [272](top) [273](keywords) [274](index)

    5.3.22. -plus : Support for the Ti83Plus

   Defines how the [275]INVOKE command is coded: either as a RST 28H
   instruction (option on) or as a regular [276]CALL instruction (option
   off).

   ══════════════════════════════════════════════════════════════════════════

   [277](top) [278](keywords) [279](index)

    5.3.23. -C : Enable LINE directive

   Enables the [280]LINE directive to synchronize error message line numbers
   with the line numbers from the source file.

2. An overview of assembler features and related files

   ══════════════════════════════════════════════════════════════════════════

   [281](top) [282](keywords) [283](index)

  5.4. The Z88 operating system definition files

   You will find header files containing all operating system definitions as
   defined in the [284]Z88 Developers' Notes V3 in the "OZdefc.zip" file.
   This makes the operating system interface programming a lot easier.

   ══════════════════════════════════════════════════════════════════════════

   [285](top) [286](keywords) [287](index)

  5.5. The supplied standard library Z80 source files

   We have supplied a standard library with useful routines for both
   beginners and professional machine code programmers. All source files are
   supplied for having the opportunity to study and improve the routines.
   However some routines are programmed especially for the [288]Z88 operating
   system and may not be of use for other [289]Z80 based computers unless
   thoroughly rewritten. The standard library source files may be found in
   the " [290]Z80 lib.zip" file.

   ══════════════════════════════════════════════════════════════════════════

   [291](top) [292](keywords) [293](index)

  5.6. Z88 module assembler application source

   We have supplied the complete source of the [294]Z88 module assembler
   application. This allows you to evaluate many aspects of programming
   applications on the [295]Z88 . Further, most features of the assembler are
   mirrored in these source files; using directives, the free format of
   [296]Z80 mnemonics, library routine access, modular file design, labels,
   using expressions, comments, data structure manipulation and good
   programming design.

   ══════════════════════════════════════════════════════════════════════════

   [297](top) [298](keywords) [299](index)

  5.7. File based compilation

   This assembler is completely file based, i.e. all parsing and code
   generation is manipulated via files on storage medias such as harddisks or
   floppy disks (or file based RAM-discs).

   ══════════════════════════════════════════════════════════════════════════

   [300](top) [301](keywords) [302](index)

  5.8. Modular source file design

   A compilation may be split into individual source files that either can be
   linked together during assembly as a single module or assembled as
   separate source file modules. Separate source file modules saves
   compilation time and memory. Further, this design is much more
   straightforward and much more logically clear in a design phase of a large
   compilation project than one huge kludge of a source file.

   ══════════════════════════════════════════════════════════════════════════

   [303](top) [304](keywords) [305](index)

  5.9. Scope of symbols in source modules

   All source modules may refer to each others symbols by using [306]EXTERN
   directives. This means that you refer to external information outside the
   current source module. The opposite of an external module reference is to
   declare symbols globally available using a [307]PUBLIC directive, i.e.
   making symbols available to other source modules. Finally it is possible
   to have local symbols that are not known to other source modules than the
   current. A label or constant that has not been declared with [308]EXTERN ,
   [309]PUBLIC or [310]GLOBAL is local to the module.

   ══════════════════════════════════════════════════════════════════════════

   [311](top) [312](keywords) [313](index)

  5.10. Using arithmetic and relational expressions

   All directives that require a numerical parameter or [314]Z80 mnemonics
   that use an integer argument may use expressions. Expressions may be
   formed by all standard arithmetic operators and relational operators. Even
   binary operators are implemented. All expressions may contain external
   identifiers and is automatically resolved during the linking phase. Only
   certain directives require compilation time evaluable expressions.

   ══════════════════════════════════════════════════════════════════════════

   [315](top) [316](keywords) [317](index)

  5.11. Source file manipulation

   To allow the Assembler to execute in multitasking environments such as
   LINUX and QDOS, all source input files are opened as shared I/O. This
   allows other programs to access the source files while the assembler is
   working. All output files (both text and binary files) are opened/created
   for exclusive use; other programs will have no access to those files until
   they have been closed.

   ══════════════════════════════════════════════════════════════════════════

   [318](top) [319](keywords) [320](index)

  5.12. Free format of assembler source files

   The source files may be written in a free format. No fixed position
   columns as needed as in the COBOL programming language. All text may be
   typed in mixed case (the assembler converts all text input to uppercase).
   Tabulators may be used freely (instead of spaces which also saves source
   file space) to suit the programmers own habits of structured text layouts.
   However, one rule must be obeyed: syntax of [321]Z80 assembler mnemonics
   and most directives must be completed on individual lines. Text files
   using different OS dependant line feed standard are parsed properly; line
   feed types CR, LF or CRLF are automatically recognized. So you can easily
   compile your sources from Linux/UNIX on an MSDOS platform.

   ══════════════════════════════════════════════════════════════════════════

   [322](top) [323](keywords) [324](index)

  5.13. Specification of filenames

   Specification of file names in source files are always enclosed in double
   quotes. The assembler just collects the filename string and uses this to
   open a file. This way all filename standards may be used as defined on
   different operating system platforms.

   ══════════════════════════════════════════════════════════════════════════

   [325](top) [326](keywords) [327](index)

  5.14. Including other source files into the current source file

   The need for header file information such as operating system constants or
   data structures is often indispensable for source file modules. Instead of
   copying the contents of those files into each module, it is possible to
   include them at run time (during parsing). Infinite include file levels
   are permitted, i.e. included files calling other files.

   ══════════════════════════════════════════════════════════════════════════

   [328](top) [329](keywords) [330](index)

  5.15. Conditional assembly in source file modules

   Large compilation projects often need to compile the application in
   several variations. This can be achieved with enclosing parts of the
   source with conditional directives for the different variations of the
   application. This may also be useful if the assembler source is ported to
   several platforms, where inclusion of other source files (such as header
   files) are using different filename standards. The conditional directives
   [331]IF , [332]IFDEF , [333]IFNDEF , ELSE, and ENDIF may be nested into
   infinite levels.

   ══════════════════════════════════════════════════════════════════════════

   [334](top) [335](keywords) [336](index)

  5.16. Undocumented Z80 instruction code generation

   We have included the syntax parsing and code generation of the
   undocumented [337]Z80 instructions for the sake of completeness. However,
   IM 2 interrupts must be disabled before they are executed (an interrupt
   may otherwise occur in the middle of the instruction execution). Many
   games on the ZX Spectrum have used them to protect the code from prying
   eyes. The [338]Z88 native debugger code uses some of the undocumented
   instructions for fast access to register variables.

   ══════════════════════════════════════════════════════════════════════════

   [339](top) [340](keywords) [341](index)

  5.17. Object file generation

   The [342]Z80 Module Assembler generates object files that contains the
   compressed version of an assembled source module. The information herein
   contains declared symbols (local, global and external), expressions,
   address origin, module name and machine code. The object file modules are
   much smaller than their source file counterparts (often smaller than 2K).

   ══════════════════════════════════════════════════════════════════════════

   [343](top) [344](keywords) [345](index)

  5.18. Transfer of object files across platforms

   The [346]Z80 Module Assembler is already implemented on several different
   computer platforms. You may freely transfer the object files and use them
   as a part of another cross-compilation. There is no system-dependent
   information in the object files.

   ══════════════════════════════════════════════════════════════════════════

   [347](top) [348](keywords) [349](index)

  5.19. Date stamp controlled assembly

   To avoid unnecessary compilation of source file modules, it is possible to
   let the assembler compile only recently updated source file modules by
   comparing the date stamp of the source and the object file modules. Source
   file modules that are older than object file modules are ignored. This
   facility is indispensable in large compilation projects.

   ══════════════════════════════════════════════════════════════════════════

   [350](top) [351](keywords) [352](index)

  5.20. Listing files

   The assembler may generate listing files that contain a copy of the source
   file with additional code generation information of [353]Z80 mnemonics
   dumped in hexadecimal format. The listing files are formatted with page
   headers containing time of assembly and the filename. Line numbers are
   included which corresponds to the source file lines.

   ══════════════════════════════════════════════════════════════════════════

   [354](top) [355](keywords) [356](index)

  5.21. Symbol information

   All symbol generated values used in source modules may be dumped to the
   end of the listing file or as a separate symbol file. If the symbol table
   is dumped into the listing file, each symbol will be written with page
   references of all occurrences in the listing file. Address symbols
   (labels) are addressed relative to the start of the module. Symbol
   constants are written as defined in the source. The symbol table is
   written in alphabetical order with corresponding values in hexadecimal
   format.

   ══════════════════════════════════════════════════════════════════════════

   [357](top) [358](keywords) [359](index)

  5.22. Linking and relocation of object modules into executable Z80 machine
  code

   To obtain an executable [360]Z80 machine code file it is necessary to link
   all assembled object modules and relocate them at a defined address, where
   the code is to be executed at in the computers' memory. The linking &
   relocation is performed automatically after completed assembly of all
   specified source file modules. The [361]ORG relocation address is
   specified in the first object module.

   ══════════════════════════════════════════════════════════════════════════

   [362](top) [363](keywords) [364](index)

  5.23. Address map files

   The address map is invaluable information during a debugging session of
   your compiled program. This file contains all symbolical address labels
   with their generated address constants after a completed
   linking/relocation of all modules into executable machine code. The map
   file is ordered in two groups; the first list contains all symbol names
   ordered alphabetically with corresponding address constants, the second
   list contains all symbols ordered by their address value (in chronological
   order).

   ══════════════════════════════════════════════════════════════════════════

   [365](top) [366](keywords) [367](index)

  5.24. Symbol address definition files

   As with address map files this contains information of globally declared
   symbolical address labels, relocated to their absolute position as for the
   compiled machine code file. However, the format is completely different;
   all symbols are created as constant definitions to be included as a header
   file into another source file and assembled. This is useful if you want to
   call subroutines compiled separately in another project (originated in a
   different memory setup).

   ══════════════════════════════════════════════════════════════════════════

   [368](top) [369](keywords) [370](index)

  5.25. Error files

   Error files are created by the assembler during processing. If any errors
   should occur, they will be written to stderr and copied to this file
   containing information of where the error occurred in the source module.
   If no errors were found, the error file is automatically closed and
   deleted.

   ══════════════════════════════════════════════════════════════════════════

   [371](top) [372](keywords) [373](index)

  5.26. Creating and using object file libraries for standard routines

   Machine programmers often re-use their standard routines. We have
   implemented a file format for generating libraries using the existing
   object file modules. Using a simple set of rules makes it very easy to
   create your own libraries from your source file modules. Documentation of
   the library file format is included in this documentation. At command line
   infinite number of libraries may be specified. All will be searched during
   linking of your object modules for referenced library routines.

   ══════════════════════════════════════════════════════════════════════════

   [374](top) [375](keywords) [376](index)

6. Executing the cross assembler and environment variables

   The following text describes how to execute the assembler and defining the
   environment variables used by the assembler.

   ══════════════════════════════════════════════════════════════════════════

   [377](top) [378](keywords) [379](index)

  6.1. The environment variables

   The assembler uses two environment variables:

     • " [380]Z80 _STDLIB" define the default filename of the standard
       library filename.
     • " [381]Z80 _OZFILES" define the default path of the standard [382]Z88
       OZ system headers.

   ══════════════════════════════════════════════════════════════════════════

   [383](top) [384](keywords) [385](index)

  6.2. Running in the QDOS/SMSQ operating system environment

   z80asm may be compiled using the C68 compiler developed by the Walker
   brothers. You also need the 'env_bin' file. This is necessary to install
   into the operating system before using the assembler. It contains the
   environment variable facility integrated on UNIX, MS-DOS and many other
   operating systems. Include the following line into your BOOT upstart
   program:

 LRESPR win1_ext_env_bin

   The device and path 'win1_ext_' is just an example of where to store your
   system extension file. You may have it on your BOOT disk as well. If you
   don't have ToolKit 2 on your system use the following line in your BOOT
   program:

 envext=RESPR(1024):LBYTES win1_ext_env_bin,envext: [CALL](#10_2_)  envext

   Use the following in your BOOT file to set the environment variables:

 SETENV "Z80_OZFILES=win1_z80_src_oz_"
 SETENV "Z80_STDLIB=win1_z80_standard_lib"

   The example file names are only a demonstration. Change them as necessary.

   ══════════════════════════════════════════════════════════════════════════

   [386](top) [387](keywords) [388](index)

  6.3. Running in the LINUX/UNIX operating system environment

   This program can be executed on the LINUX operating system and any other
   UNIX. The sources are strictly ANSI C and uses only library calls that are
   described in Brian W. Kernighan and Dennis M. Ritchie C books. The
   important thing to remember before compiling it under UNIX, is in which
   direction the integers are stored by the processor architecture; the
   famous Big Endian and Little endian concept. The config.h file uses a
   "ENDIAN" definition when z80asm must interpret integers in big endian
   order. Please set this definition according to your system's processor
   architecture. Most people uses the Intel processor when running Linux -
   this is a little endian architecture (so you don't need the ENDIAN
   define...).

   You can compile z80asm using GNU C compiler simply by entering the
   following on your command line:

 gcc  [-o](#5_3_9_)  z80asm -O2 *.c

   The environment variables needed by z80asm are easily added in your
   accounts login script, ".profile" or ".bash_profile" in your home
   directory.

   ══════════════════════════════════════════════════════════════════════════

   [389](top) [390](keywords) [391](index)

  6.4. Running in the MS-DOS operating system environment

   This program can be executed on all MSDOS operating systems using the
   INTEL 8086 processor up to high speed 80386/80486/Pentium processors on
   IBM & compatible computers. Add the source files to your favorite C
   compiler system in MSDOS or Windows (here you need to specify compilation
   options o a console application).

   The environment variables are easily put into your AUTOEXEC.BAT file.
   Simply specify:

 SET Z80_OZFILES=C:\ [Z80](#7_) \OZ\
 SET Z80_STDLIB=C:\ [Z80](#7_) \STANDARD. [LIB](#10_20_)

   Choose your own settings if you like.

   If you want the assembler to be accessible in any path, add the path
   location of the assembler in the PATH search line:

 SET PATH=%PATH%;C:\ [Z80](#7_)

   ══════════════════════════════════════════════════════════════════════════

   [392](top) [393](keywords) [394](index)

7. Z80 module assembler file types

   ══════════════════════════════════════════════════════════════════════════

   [395](top) [396](keywords) [397](index)

  7.1. The assembler file types and their extension names

   The [398]Z80 Module Assembler uses several different filename extensions
   to distinguish the type of files processed. The base name of the source
   file is used to create the various assembler output file types. The
   following chapters explains the available files.

   ══════════════════════════════════════════════════════════════════════════

   [399](top) [400](keywords) [401](index)

  7.2. The file name extension identifier

   The file name extension identifier may be different from platform to
   platform. UNIX has no defined standard. MSDOS and TOS uses '.'. QDOS uses
   the '_' identifier. SMSQ also allows the '.' extension identifier.

   The Assembler implemented on the supplied platforms is defined with the
   correct extension identifier. You can see this on the Assembler help page
   (executing the program with no parameters).

   ══════════════════════════════════════════════════════════════════════════

   [402](top) [403](keywords) [404](index)

  7.3. File types

   ══════════════════════════════════════════════════════════════════════════

   [405](top) [406](keywords) [407](index)

    7.3.1. The source file extension, asm

   The extension for assembler mnemonic source files is 'asm'. Source files
   are specified by the user with or without the extension - whatever chosen,
   the assembler will investigate automatically what is needed to read the
   source files.

   You may override the default extension with the [408]-e option.

   ══════════════════════════════════════════════════════════════════════════

   [409](top) [410](keywords) [411](index)

    7.3.2. The object file extension, obj

   The extension for object files is 'obj'. The base file name is taken from
   the corresponding source file name. This file is generated by the
   assembler from parsing the source file and contains intermediate generated
   machine code, an address origin of the machine code, symbol information
   and expressions.

   You may override the default extension with the [412]-M option.

   ══════════════════════════════════════════════════════════════════════════

   [413](top) [414](keywords) [415](index)

    7.3.3. The error file extension, err

   The extension for error files is 'err'. Before beginning processing the
   source files, an error file is created. If any errors should occur, they
   will be written to this file containing information of where the error
   occurred. If no error were found, the error file is automatically closed
   and deleted.

   Error files are simple text files that can be loaded by any text editor
   for evaluation.

   ══════════════════════════════════════════════════════════════════════════

   [416](top) [417](keywords) [418](index)

    7.3.4. The listing file extension, lst

   The extension for listing files is 'lst'. The base file name is taken from
   the corresponding source file name. This file is generated by the
   assembler and contains a hexadecimal output of the generated machine code
   that corresponds to the [419]Z80 mnemonic instruction or directive,
   followed by a copy of the original source line. If selected, the symbol
   table is dumped at the end of the listing file.

   ══════════════════════════════════════════════════════════════════════════

   [420](top) [421](keywords) [422](index)

    7.3.5. The symbol file extension, sym

   The extension for symbol table files is 'sym'. The base file name is taken
   from the corresponding source file name. The symbol table file contains
   information about the defined and used symbols of the source file and
   their generated values (labels and constants). The symbol file is only
   created if listing file output is disabled.

   ══════════════════════════════════════════════════════════════════════════

   [423](top) [424](keywords) [425](index)

    7.3.6. The executable file extension, bin

   The extension for executable [426]Z80 machine code files is 'bin'. The
   base file name is taken from the first specified source file name at the
   command line (or project file). This is the linked and relocated output of
   object files and may be executed by the [427]Z80 processor. You may
   override this default behaviour by using the [428]-o option and specify
   your own output filename (and extension).

   You may override this default behavior by using the [429]-o option and
   specify your own output filename and extension.

   ══════════════════════════════════════════════════════════════════════════

   [430](top) [431](keywords) [432](index)

    7.3.7. The address map file extension, map

   The extension for address map files is 'map'. The base file name is taken
   from the first specified source file name at the command line (or project
   file). This file is generated by the assembler and contains a list of all
   defined address labels from all linked/relocated modules with their
   calculated (absolute) address in memory.

   ══════════════════════════════════════════════════════════════════════════

   [433](top) [434](keywords) [435](index)

    7.3.8. The definition file extension, def

   The extension for global address label definition files is 'def'. The base
   file name is taken from the first specified source file name at the
   command line (or project file). This file is generated by the assembler
   and contains a list of all globally declared address labels with their
   calculated (absolute) origin address, fetched only during assembly of
   source file modules. The format of the list contains constant definitions
   (addresses) and may be parsed e.g. as include files for other projects.

   ══════════════════════════════════════════════════════════════════════════

   [436](top) [437](keywords) [438](index)

    7.3.9. The library file extension, lib

   Library files are identified with the 'lib' extension. Library files may
   be created using the [439]-x option. Library may be included into
   application code during linking of object modules with the [440]-i option.

   ══════════════════════════════════════════════════════════════════════════

   [441](top) [442](keywords) [443](index)

8. Compiling files

   ══════════════════════════════════════════════════════════════════════════

   [444](top) [445](keywords) [446](index)

  8.1. The assembler compiling process

   The [447]Z80 Module Assembler uses a two stage compilation process; stage
   1 parses source files and generates object files. Stage 2 reads the object
   files and links the object file code, completes with address patching and
   finishes with storing the executable code.

   ══════════════════════════════════════════════════════════════════════════

   [448](top) [449](keywords) [450](index)

    8.1.1. Stage 1, parsing and code generation of all source files, object file
    generation

   A source file is being parsed for [451]Z80 mnemonics and directives. An
   object file is created to hold information of module name, local, global
   and external symbol identifiers, expressions and the intermediate code
   generation (but address and other constant information). During pass 1 all
   [452]Z80 mnemonics are parsed and code is generated appropriately. All
   expressions are evaluated; expressions that contain relocatable address
   symbols or external symbol are automatically stored into the object file.
   Expressions that didn't evaluate are preserved for pass 2. When a source
   file has been read successfully to the end, pass 2 is started. During pass
   2 all non-evaluated expressions from pass 1 are re-evaluated and stored to
   the object file if necessary. Errors are reported if symbols are still
   missing in expressions. When all expressions are evaluated and no errors
   occurred, all "touched" symbols (used in expressions) are stored into the
   object file, with scope, type and value. Then, the module name and
   generated code is stored to the object file. Various file pointers to
   sub-sections of the object file is resolved. The completion of stage 1 is
   to produce the symbol table output (either appended to listing file if
   selected or as a separate file).

   This process is performed for all specified source modules in a project.

   ══════════════════════════════════════════════════════════════════════════

   [453](top) [454](keywords) [455](index)

    8.1.2. Stage 2, linking object files and library modules, producing
    executable code

   Pass 1 of the linking loads information from each object file in the
   project; the [456]ORG address is fetched, identifiers (resolving scope,
   and absolute values) loaded, and machine code linked. During this pass all
   external library modules are fetched and linked with the object modules
   (if a library is specified from the command line). When all modules have
   been loaded, pass 2 begins. Pass 2 then reads each expression section from
   all object modules (including library modules), evaluates them and patches
   the value into the appropriate position of the linked machine code. When
   all expressions have been evaluated successfully the executable code is
   stored. If selected, the address map file is produced from the current
   symbol table resided in the data structures of the assembler's memory is
   stored to a text file.

   ══════════════════════════════════════════════════════════════════════════

   [457](top) [458](keywords) [459](index)

  8.2. File names

   Specification of file names follows the convention used on the various
   platforms that the assembler is ported to. Please read your operating
   systems manual for more information.

   ══════════════════════════════════════════════════════════════════════════

   [460](top) [461](keywords) [462](index)

  8.3. Portability of assembler file names

   If you are going to port your [463]Z80 Module Assembler files across
   several platforms a few hints may be worth considering:

   Avoid special symbols in file names like '_', '#' and '.' . They may have
   special meaning on some operating system platforms. Use only 7-bit
   standard ASCII letters in file names ('A' to 'z'). Non English language
   letters are not always allowed, and further they may not be interpreted
   correctly when ported to another platform. Avoid too long file names. Some
   operating systems have boundaries for length of filenames in a directory
   path. For example MS-DOS only allows 8 characters in a file name (followed
   by an extension). Others may have no boundaries.

   ══════════════════════════════════════════════════════════════════════════

   [464](top) [465](keywords) [466](index)

  8.4. Source file structure

   The composition of a source file module is completely free to the
   programmer. How he chooses to place the source code on a text line has no
   effect of the parsing process of the assembler. The linefeed
   interpretation is also handled by z80asm - it understands the following
   formats:

     • <LF> (used by QDOS/SMSQ/UNIX/AMIGA);
     • <CR><LF> (used by MSDOS);
     • <CR> (used by [467]Z88 /MacIntosh).

   ══════════════════════════════════════════════════════════════════════════

   [468](top) [469](keywords) [470](index)

  8.5. Using local, global and external symbols

   In larger application projects it is unavoidable to use a modular
   programming design, i.e. splitting the source into several individual
   files. This approaches the popular top - down design where you can isolate
   the problem solving into single modules. The outside world just needs to
   know where the routine is to be called by linking the modules with a few
   directives.

   In the [471]Z80 Module Assembler you only need two directives to
   accomplish just that: the [472]XREF and [473]XDEF directives.

   [474]XREF declares a symbol to be external to the current source file
   module. This tells the assembler that all expressions using that symbol is
   not to be evaluated until the compiled object modules are to linked and
   relocated together. An expression that contains this symbol is simply
   stored into the object file.

   [475]XDEF declares a symbol to be created in this module and made globally
   available to other modules during the linking/relocation phase. All
   expressions that contain a globally declared symbol is automatically
   stored into the object file.

   When a symbol is created and is neither declared external or global, it is
   implicitly defined as local to the current source module. The symbol is
   then only available to the current module during linking/relocation.

   If you want to access (external) library modules from a library, use the
   [476]LIB directive followed by the name of the routine. Several routine
   names may be specified separated by a comma.

   During the linking process all external and corresponding global symbols
   are resolved. If two identical global identifiers are loaded by the
   linking process, the most recently loaded identifier is used by the
   linker.

   ══════════════════════════════════════════════════════════════════════════

   [477](top) [478](keywords) [479](index)

  8.6. Defining symbol names

   Good programming involves a structured approach to mnemonic identification
   of names in subroutines, variables, data structures and other constants.
   The [480]Z80 Module Assembler gives you several possibilities. The easiest
   and frequently used one is [481]DEFC (Define Constant). We have supplied a
   complete set of header files (the "OZdefc.zip" file) containing the
   [482]Z88 operating system manifests as defined in the Developers' Notes V3
   (the "devnotes.zip" file) which just contains [483]DEFC directives.

   Each [484]DEFC directive is followed by an identifier name, followed by a
   = symbol and then an evaluable constant expression (usually just a
   constant). Constant definitions are usually operating system manifest or
   other frequently used items. They are put into separate source files and
   later inserted into main source files using the [485]INCLUDE directive.

   Though [486]DEFC resolves most needs, it may be necessary to define
   variable areas or templates containing names with an appropriate size tag
   (byte, word or double word). This is possible using the [487]DEFVARS
   directive. Here you may specify as many names as needed in the group.
   Then, it is easy to add, rearrange or delete any of the variable names -
   only a few modifications and then just re-compiling the necessary source
   files that use the templates. This would be a nightmare with [488]DEFC ,
   since you have to keep track of the previous and next name in the group in
   addition to count the size of all names. All this is managed by
   [489]DEFVARS automatically. Have a look at the syntax in the Directive
   Reference section.

   With advanced [490]Z80 programming you cannot avoid dynamic data
   structures like linked lists or binary trees. The fundamentals for this
   are known as records in PASCAL or structures in C. [491]DEFVARS is well
   suited for this purpose. Defining each [492]DEFVARS group with 0
   automatically generates offset variables. The last name then automatically
   defines the size of the data structure. Again, refer to the directive
   reference for a good example.

   A third possibility for an easy definition of symbols is to use the
   [493]DEFGROUP directive. Here you're able to define a set of symbols equal
   to an enumeration. It follows the same principles as for C's ENUM
   facility. The default starts at 0 and increases by 1. If you choose, a
   specific identifier may be set to a value, which then can set the next
   enumeration sequence. Again, this directive has been made to implement an
   easy way of defining symbols and providing a simple method to alter the
   identifier group. Please refer to the directive reference for an example.

   ══════════════════════════════════════════════════════════════════════════

   [494](top) [495](keywords) [496](index)

  8.7. Comments in source files

   As always, good programming requires good documentation. Without comments
   your programs lose overview and logic. Machine code is especially hard to
   follow - have you tried to look at a piece of code 2 years after
   implementation AND without any comments? HORRIBLE! There is never too many
   comments in machine code - we especially like to use high level language
   as comments - it avoids unnecessary text and logic is much more clear.

   Comments in [497]Z80 source files are possible using a semicolon. When the
   assembler meets a semicolon the rest of the current source line is ignored
   until the linefeed. Parsing will then commence from the beginning of the
   line. The semicolon may be placed anywhere in a source line. As stated you
   cannot place mnemonics after the semicolon - they will be ignored. The
   [498]Z80 parser will in many places accept comments without a semicolon
   has been set - but don't rely on it. Better use a semicolon. The context
   is much clearer. The following is an example on how to use comments in
   [499]Z80 source files:

 ; **********************
 ; main menu
 ;
 .mainmenu   call window   ; display menu
             call getkey   ; read keyboard
             ret           ; action in register A

   ══════════════════════════════════════════════════════════════════════════

   [500](top) [501](keywords) [502](index)

  8.8. Defining symbolic address labels

   The main reason for using an assembler is to be able to determine
   symbolical addresses and use them as reference in the code. These are
   defined by a name preceded with a full stop, or followed by a colon. It is
   allowed to place a mnemonic or directive after an address label. An
   address label may be left as a single statement on a line - you may of
   course use comment after the label. The following is a label definition:

 ; *****************
 ; routine definition
 .mainmenu call xxx   ; a label is preceded with '.'
 endmain:  ret                ; or followed by ':'

   It is not allowed to position two labels on the same line. However, you
   may place as many label after each other - even though no code is between
   them. They just receive the same assembler address.

   It is not allowed to specify two identical address labels in the same
   source file.

   If you want to declare an address globally accessible to other modules,
   then use [503]PUBLIC for the address label definition, otherwise the label
   definition will be interpreted as a local address label.

  [PUBLIC](#10_26_)  mainmenu
 ...
 .mainmenu ; label accessible from other modules with  [EXTERN](#10_12_)

   You may use before or after the label - z80asm automatically handles the
   scope resolution as long as you use [504]PUBLIC to define it as globally
   accessible.

   ══════════════════════════════════════════════════════════════════════════

   [505](top) [506](keywords) [507](index)

  8.9. Writing Z80 mnemonic instructions

   All [508]Z80 instructions may be written in mixed case, lower or upper
   case - you decide! How you separate opcode words, register names and
   operands is your choice. Only a few rules must be obeyed:

    1. Each instruction mnemonic must be completed on a single line.
    2. The instruction identifier must be a word, i.e. don't use space
       between [509]CALL .
    3. Register identifiers must be a word, ie. HL not H L.

   A few examples which all are legal syntax:

 Ld HL   , 0       ; comment
 ld       hl, $fFFF;comment
 caLL ttttt

   ══════════════════════════════════════════════════════════════════════════

   [510](top) [511](keywords) [512](index)

  8.10. Optional Z80 mnemonic instruction syntax

   The instructions below allow additional specification of the accumulator
   register. Zilog standard convention is to only specify the source operand.
   Sometimes it is better to specify the accumulator to make the instruction
   look more clear, and to avoid confusion. After all, they specified it for
   "add", "adc" and "sbc".

 sub a,r
 sub a,n
 sub a,(hl)
 sub a,(ix+0)
 sub a,(iy+0)

   this syntax applies also to "and", "or", "xor" & "cp"

   ══════════════════════════════════════════════════════════════════════════

   [513](top) [514](keywords) [515](index)

  8.11. The undocumented Z80 instructions

   We have included the parsing and code generation of the undocumented
   [516]Z80 instructions. They are as follows:

 LD   r,IXL  ; r = A,B,C,D,E,IXL,IXH
 LD   r,IXH
 LD   IXL,n  ; n = 8-bit operand
 LD   IXH,n

 ADC  A,IXL
 ADC  A,IXH
 ADD, AND, CP, DEC, INC, OR, SBC, SUB, XOR ...

 SLL  r   ; r = A,B,C,D,E,H,L
 SLL  (HL)
 SLL  (IX+d)
 SLL  (IY+d)

   SLL (Shift Logical Left)

   SLL does shift leftwards but insert a '1' in bit 0 instead of a '0'.

   Except for the SLL instruction all have bugs related to an interrupt being
   able to occur while the instructions are decoded by the processor. They
   are implemented on the chip, but are reported to be unreliable. We have
   used some of them in our debugger software for the [517]Z88 . Until now
   the code has been running successfully on all our [518]Z88 computers.

   ══════════════════════════════════════════════════════════════════════════

   [519](top) [520](keywords) [521](index)

  8.12. Referencing library routines

   When you need to use a library routine in your application code, you need
   to do two things; include a library file at the assembler command line
   with the [522]-i option and refer to the library routine in your source
   file using the [523]LIB directive followed by the name of the library
   routine, e.g.

  [LIB](#10_20_)  malloc, free

   which will declare the two names "malloc" and "free" as external
   identifiers to the current source file module. Please note that you can
   declare the names before or after they actually are referred in your
   program source,. Failing to use the [524]LIB directive will interpret
   labels as local symbols to that source file module. When the parser meets
   the instruction that uses one of the above names in a parameter, the
   parameter "expression" is automatically saved to the object file for later
   processing.

   During the linking phase of all the object files the specified library
   file is automatically scanned for "malloc" and "free" and included into
   the application code when found.

   Much application programming can be saved in "re-inventing the wheel" if
   you store frequently used standard routines in libraries. We have supplied
   a comprehensive set of library routines that were created along the
   development of the Assembler Workbench application EPROM. Use them as
   appropriate and add new ones. We are interested in your work - if you feel
   that you have made some good routines that others may benefit from, e-mail
   them to us and we will include them into the standard library.

   ══════════════════════════════════════════════════════════════════════════

   [525](top) [526](keywords) [527](index)

  8.13. Creating/updating libraries

   Creating libraries is an inbuilt feature of the assembler. The following
   steps are necessary to create a library:

    1. Define a project file containing all filenames (without extensions) in
       your directory that contains all library routines (the easiest method
       since you later can move all files to another directory). Remember to
       arrange the filename in a topological order, i.e. library routines
       that access other routines must be placed first. This optimizes the
       searching through a library during the linking process.

    2. Each library source module uses the [528]XLIB directive to define the
       name of the routine. The same name must be used for the address label
       definition. If your library uses other library routines then declare
       them with the [529]LIB directive. Please note that a library routine
       creates the module name itself (performed by [530]XLIB automatically).
       The module name is used to search for routines in a library.

    3. The command line contains the [531]-x option immediately followed by
       your filename. If you don't specify a filename, the default standard
       filename is used (defined by the [532]Z80 _STDLIB environment
       variable). Then you need to specify your project filename preceded by
       '@'.

   For example:

 z80asm -xiofunctions @iofunctions

   will create a library "iofunctions.lib" in the current directory (also
   containing all library source files). The project file is "iofunctions"
   also in the current directory.

   Please note that no binary file is created (a library is NOT an executable
   file), but a collection of object files sequentially organized in a file.

   ══════════════════════════════════════════════════════════════════════════

   [533](top) [534](keywords) [535](index)

  8.14. Referencing routines in other compiled projects

   It may be necessary in some situations to get access to routines
   previously compiled in another project. This implies however a knowledge
   of their absolute addresses during linking. This information is stored in
   the map file, but not accessible in a form suitable to be parsed by the
   assembler. However, this is possible in using the [536]-g option at the
   assembler command line. The action performed creates a [537]DEFC list file
   of address labels that have been declared as globally available (using the
   [538]XDEF directive). Only compiled source files are included in the list.
   If you were using the [539]-a option (compile only updated source files)
   and no files were updated then the [540]-g file would be empty. If you
   would like a complete list of all global routines then it is needed to
   compile the whole project (using the [541]-b command line option).

   When the file is generated, it can easily be [542]INCLUDE 'd in another
   project where your routines may access the external routines. You might do
   this in two ways:

    1. Including the file in every source module that needs to access
       external routines. This may be the easiest solution if you're only
       going to need external access in one or two source modules. With many
       external calls in different module of the current project it requires
       much altering of files.

    2. Creating a new source file that is part of your project. This file
       could easily be the first file in your project but could just as well
       be placed anywhere in your project. Declare each external name that is
       needed somewhere in your project as [543]XDEF , meaning that all names
       to be included are globally accessible from this module. Then specify
       the [544]INCLUDE of the [545]DEFC list of the other project file. As
       the names get loaded, they become global definitions. All other
       definitions will be ignored and not stored to the object file (they
       are not referred in the source module). All other modules just need to
       specify the external names as [546]XREF . During linking they all get
       resolved and your code has access to external routines from a
       previously compiled project.

   Whenever the previous project has been re-compiled (and issued with
   [547]-g option) there is a possibility that routine addresses has changed.
   You therefore need to recompile the extra source module in your project to
   get the new identifier values - the rest of your compilation is unaffected
   (due to the [548]XREF directives). Only the linking process gets the new
   proper addresses. In example 1) you had to recompile all source files that
   would have used an [549]INCLUDE of the [550]DEFC list file. In example 2)
   only one file had to be recompiled.

   The principle of external addresses was used to compile the debugger
   version to be resided in segment 0 (into the upper 8K). The actual size of
   the debugger code uses 16K, but was split into two separate halves to fit
   into the upper 8K of segment 0. Each of the 8K code-segments had to get
   access to the other 8K block. The solution was the [551]-g option and
   cross referencing using [552]XREF and an additional source module
   (containing the [553]XDEF declarations) that included the [554]-g list
   file of the other project compilation.

   ══════════════════════════════════════════════════════════════════════════

   [555](top) [556](keywords) [557](index)

9. Using expressions

   Expressions are almost unavoidable in source files. They define and
   explain things much clearer than just using a constant. The [558]Z80
   Module Assembler allows expressions wherever a parameter is needed. This
   applies to [559]Z80 mnemonic instructions, directives and even in
   character strings. The resulting value from an evaluated expression is
   always an integer. All expressions are calculated internally as 32-bit
   signed integers. However, the parameter type defines the true range of the
   expression. E.g. you cannot store a 32-bit signed integer at an 8-bit LD
   instruction like LD A, <n> . If a parameter is outside an allowed integer
   range an assembly error is reported. Finally, no floating point operations
   are needed by the assembler. There is no real standard on [560]Z80 based
   computers.

   Whenever an integer is stored in a [561]Z80 file, the standard Zilog
   notation is used, i.e. storing the integer in low byte, high byte order
   (this also applies to 32-bit integers). This standard is also known as
   little endian notation (also used by INTEL processors).

   Expressions may be formed as arithmetic and relational expressions.
   Several components are supported: symbol names (identifiers), constants,
   ASCII characters and various arithmetic operators.

   ══════════════════════════════════════════════════════════════════════════

   [562](top) [563](keywords) [564](index)

  9.1. Constant identifiers

   Apart from specifying decimal integer numbers, you are allowed to use
   hexadecimal constants, binary constants and ASCII characters. The
   following symbols are put in front of the constant to identify the type:

 $ : hexadecimal constant, e.g. $4000 (16384).
 @ : binary constant, e.g. @11000000 (192).
 ' ' : ASCII character, e.g. 'a'.

   ══════════════════════════════════════════════════════════════════════════

   [565](top) [566](keywords) [567](index)

  9.2. Arithmetic operators

   All basic arithmetic operators are supported: addition, subtraction,
   multiplication, division and modulus. In addition binary logical operators
   are implemented: binary AND, OR and XOR.

 + : addition, e.g. 12+13
 - : unary minus, subtraction. e.g. -10, 12-45
 * : multiplication, e.g. 45*2 (90)
 / : division, e.g. 256/8 (32)
 % : modulus, e.g. 256%8 (0)
 ** : power, e.g. 2**7 (128)
 & : binary AND, e.g. 255 & 7 (7)
 | : binary OR, e.g. 128 | 64 (192)
 ^ : binary XOR, e.g. 128 ^ 128 (0)
 ~ : binary NOT, e.g. (~0xAA) & 0xFF (0x55)

   Arithmetic operators use the standard operator precedence, shown from
   highest to lowest:

 constant identifiers
 () ** */% +-&|^~

   If you want to override the default operator precedence rules, use
   brackets ().

   ══════════════════════════════════════════════════════════════════════════

   [568](top) [569](keywords) [570](index)

  9.3. Relational operators

   With relational operators you may form logical expressions resulting in
   true or false conditions. The resulting value of a true expression is 1.
   The resulting value of a false expression is 0. These operators are quite
   handy when you need to perform complex logic for conditional assembly in
   [571]IF -ELSE-ENDIF statements. The following relational operators are
   available:

 = : equal to
 <> :not equal to
 < : less than
 > : larger than
 <= : less than or equal to
 >= : larger than or equal to
 ! : not

   You may link several relational expressions with the binary operators AND,
   OR and XOR. You have all the possibilities available!

   It is perfectly legal to use relational expressions in parameters
   requiring an arithmetic value. For example:

 LD A, (USING_IBM = 1) | RTMFLAGS

   ══════════════════════════════════════════════════════════════════════════

   [572](top) [573](keywords) [574](index)

  9.4. The ASMPC standard function

   In occasional circumstances it may be necessary to use the current
   location of the assembler program counter in an expression e.g.
   calculating a relative distance. This may be done with the help of the
   ASMPC identifier. An example:

 .errmsg0  [DEFB](#10_3_)  errmsg1 - ASMPC - 1 , "File open error"
 .errmsg1  [DEFB](#10_3_)  errmsg2 - ASMPC - 1 , "Syntax error"
 .errmsg2

   Here, a length byte of the following string (excluding the length byte) is
   calculated by using the current ASMPC address value.

   ══════════════════════════════════════════════════════════════════════════

   [575](top) [576](keywords) [577](index)

  9.5. Symbol identifiers in expressions

   Apart from using integer constants in your expressions, names are allowed
   as well. This is frequently used for symbolical address label references
   (both external and local).

   Forward referencing of symbols is not really something that is important
   in evaluating expressions. The logic is built into the assembler parser.
   If an expression cannot be resolved in pass 1 of source file parsing, it
   will try to re-evaluate the failed expression in pass 2 of the parsing. If
   it still fails a symbol has not been found ( [578]XREF and [579]LIB
   external symbols are handled during the linking phase).

   ══════════════════════════════════════════════════════════════════════════

   [580](top) [581](keywords) [582](index)

10. Directive reference

   The [583]Z80 Module Assembler directives are used to manipulate the
   [584]Z80 assembler mnemonics and to generate data structures, variables
   and constants. You are even permitted to include binary files while code
   generation is performed.

   As the name imply they direct the assembler to perform other tasks than
   just parsing and compiling [585]Z80 instruction mnemonics. All directives
   are treated as mnemonics by the assembler, i.e. it is necessary that they
   appear as the first command identifier on the source line (NOT necessarily
   the first character). Only one directive is allowed at a single source
   line. Even though they are written as CAPITALS in this documentation they
   may be written in mixed case letters in your source files.

   Since the directives cover very different topics of assembler processing,
   each directive will be explained in detail, identified with a header
   description for each text section. The following syntax is used:

 <> : defines an entity, i.e. a number, character or string.
 {} : defines a an optional repetition of an entity.
 [] : defines an option that may be left out.

   ══════════════════════════════════════════════════════════════════════════

   [586](top) [587](keywords) [588](index)

  10.1. BINARY "filename"

   [589]BINARY loads a binary file at the current location. This could for
   example be a static data structure or an executable machine code routine.
   The loaded binary file information is included into the object file code
   section. The assembler PC is updated to the end of the loaded binary code.

   ══════════════════════════════════════════════════════════════════════════

   [590](top) [591](keywords) [592](index)

  10.2. CALL_OZ <expression>

   The <expression> may be a 16-bit expression and must evaluate to a
   constant. This is an easy interface call to the [593]Z88 operating system.
   This is an advanced RST 20H instruction which automatically allocates
   space for the size of the specified parameter (either 8-bit or 16-bit).
   Code is internally generated as follows:

 RST $20
  [DEFB](#10_3_)  x ; 8-bit parameter

   or

 RST $20
  [DEFW](#10_4_)  x ; 16-bit parameter

   ══════════════════════════════════════════════════════════════════════════

   [594](top) [595](keywords) [596](index)

  10.3. DEFB <8-bit expr>,{<8-bit expr>} (-128; 255)

   Stores a sequence of bytes (8-bits) at the current location. Expressions
   may be used to calculate the values.

   ══════════════════════════════════════════════════════════════════════════

   [597](top) [598](keywords) [599](index)

  10.4. DEFW <16-bit expr>,{<16-bit expr>} (-32768; 65535)

   Stores a sequence of words (16-bits) in low byte - high byte order (little
   endian) at the current location. Expressions may be used to calculate the
   values.

   ══════════════════════════════════════════════════════════════════════════

   [600](top) [601](keywords) [602](index)

  10.5. DEFL <32-bit expr>,{<32-bit expr>} (-2147483647; 4294967295)

   Stores a sequence of double-words (32-bits) in low byte - high byte order
   (little endian) at the current location. Expressions may be used to
   calculate the values.

   ══════════════════════════════════════════════════════════════════════════

   [603](top) [604](keywords) [605](index)

  10.6. DEFC name=<32-bit expression>{, name=<32-bit expression>}

   Define a symbol variable, that may either be a constant or an expression
   evaluated at link time. The allowed range is a signed 32-bit integer
   value. All standard [606]Z88 operating system header files use [607]DEFC

   ══════════════════════════════════════════════════════════════════════════

   [608](top) [609](keywords) [610](index)

  10.7. DEFM <string expression>|<8-bit expr>,...

   [611]DEFM stores a string constant at the current location. Strings are
   enclosed in double quotes, e.g. "abcdefgh". Strings may be concatenated
   with byte constants using commas. This is useful if control characters
   need to be a part of the string and cannot be typed from the keyboard.
   Several strings and byte expressions may be concatenated, e.g.

  [DEFM](#10_7_)  "string_a" , "string_b" , 'X' , CR , LF , 0

   ══════════════════════════════════════════════════════════════════════════

   [612](top) [613](keywords) [614](index)

  10.8. DEFGROUP '{' name {',' name ['=' <8-bit expression>]} '}'

   [615]DEFGROUP defines a group of identifier symbols with implicit values.
   This is similar to the enumeration principles used in C and PASCAL. The
   initial symbol value is 0, increased by 1 for each new symbol in the list.
   You may include a <name = expression> which breaks the linear enumeration
   from that constant. The [616]DEFGROUP directive may be spanned across
   several lines and MUST be enclosed with { and }. [617]DEFGROUP is just a
   more easy way than: [618]DEFC name0 = 0, name1 = name0, ...

   The following example illustrates a useful example of defining symbol
   values:

  [DEFGROUP](#10_8_)
 {
    sym_null
    sym_ten = 10, sym_eleven, sym_twelve
 }

   ══════════════════════════════════════════════════════════════════════════

   [619](top) [620](keywords) [621](index)

  10.9. DEFINE name,{name}

   Defines a symbol identifier as logically true (integer <> 0). The symbol
   will be created as a local variable and disappears when assembly is
   finished on the current source file module.

   ══════════════════════════════════════════════════════════════════════════

   [622](top) [623](keywords) [624](index)

  10.10. DEFS <size>{, <fill-byte>}

   [625]DEFS allocates a storage area of the given size with the given
   fill-byte. The fill-byte defaults to zero if not supplied. Both
   expressions need to be constants.

   ══════════════════════════════════════════════════════════════════════════

   [626](top) [627](keywords) [628](index)

  10.11. DEFVARS <16-bit expression> '{' [<name>] [<storage_size>
  <size_multiplier>] '}'

   [629]DEFVARS defines variable address area or offsets. First you define
   the origin of a variable area. This may be defined using an evaluable
   16-bit positive expression. Each variable name is followed by a size
   specifier which can be 'ds.b' (byte), 'ds.w' (word), 'ds.p' (3-byte
   pointer) or 'ds.l' (double-word). This is particularly useful for defining
   dynamic data structures in linked lists and binary search trees. Defining
   variable areas are only template definitions not allocations. An example:

  [DEFVARS](#10_11_)   [Z80](#7_) asm_vars
 {
    RuntimeFlags1 ds.b 1     ; reserve 1 byte
    RuntimeFlags2 ds.b 1
    RuntimeFlags3 ds.b 1
                  ds.w 1     ; space not named
    explicitORIG  ds.w 1     ; reserve 2 bytes
    asmtime       ds.b 3     ; reserve 3 bytes
    datestamp_src ds.b 6     ; reserve 6 bytes
    datestamp_obj ds.b 6
    TOTALERRORS   ds.l 1     ; reserve 4 bytes
 }

   the following is useful for defining dynamic data structures:

  [DEFVARS](#10_11_)  0                    ; 'PfixStack' structure
 {
    pfixstack_const     ds.l 1    ; stack item value
    pfixstack_previtem  ds.p 1    ; pointer to previous
    SIZEOF_pfixstack              ; size of structure
 }

   This type of variable declaration makes it very easy for modifications,
   e.g. deleting or inserting variable definitions.

   A special logic is available too which can be used throughout individual
   source files during compilation. If you specify -1 as the starting
   address, the last offset from the previous [630]DEFVARS which was not
   specified as 0 will be used.

   This enables you to gradually build up a list of identifier name offsets
   across [631]DEFVARS areas in different source files. The following example
   explains everything:

 defvars $4000
 {
    aaa ds.b 1
    bbb ds.b 100
 }
 defvars -1
 {
    ccc ds.b 100
    ddd ds.b 1
    eee ds.b 10
 }
 defvars 0
 {
    fff ds.p 1
    ggg ds.b 1
    hhh ds.w 1
    iii ds.p 1
 }
 defvars -1
 {
    jjj ds.b 100

 }

   Some of the symbols will look like this:

 BBB = $4001
 CCC = $4065
 GGG = $0003
 JJJ = $40D4

   ══════════════════════════════════════════════════════════════════════════

   [632](top) [633](keywords) [634](index)

  10.12. EXTERN name {, name}

   This declares symbols as external to the current module. Such a symbol
   must have been defined as [635]PUBLIC in another module for the current
   module to be able to use the symbol (it will be linked during the linking
   phase).

   ══════════════════════════════════════════════════════════════════════════

   [636](top) [637](keywords) [638](index)

  10.13. FPP <8-bit expression>

   Interface call to the [639]Z88 operating systems' floating point library.
   This is easier than writing:

 RST $18
  [DEFB](#10_3_)  mnemonic

   This is an advanced RST 18H instruction which automatically allocates
   space for the specified parameter. All [640]Z88 floating point call
   mnemonics are defined in the "fpp.def" file.

   ══════════════════════════════════════════════════════════════════════════

   [641](top) [642](keywords) [643](index)

  10.14. GLOBAL name {, name}

   The [644]GLOBAL directive defines a symbol [645]PUBLIC if it has been
   defined locally or [646]EXTERN otherwise.

   ══════════════════════════════════════════════════════════════════════════

   [647](top) [648](keywords) [649](index)

  10.15. IF <logical expression> ... [ELSE] ... ENDIF

   This structure evaluates the logical expression as a constant, and
   compiles the lines up to the ELSE clause if the expression is true (i.e.
   not zero), or the lines from ELSE to ENDIF if is is false (i.e. zero). The
   ELSE clause is optional. This structure may be nested.

   ══════════════════════════════════════════════════════════════════════════

   [650](top) [651](keywords) [652](index)

  10.16. IFDEF <name> ... [ELSE] ... ENDIF

   This structure checks if the give symbol name is defined, and compiles the
   lines up to the ELSE clause if true (i.e. defined), or the lines from ELSE
   to ENDIF if false (i.e. not defined). The ELSE clause is optional. This
   structure may be nested.

   ══════════════════════════════════════════════════════════════════════════

   [653](top) [654](keywords) [655](index)

  10.17. IFNDEF <name> ... [ELSE] ... ENDIF

   This structure checks if the give symbol name is not defined, and compiles
   the lines up to the ELSE clause if true (i.e. not defined), or the lines
   from ELSE to ENDIF if false (i.e. defined). The ELSE clause is optional.
   This structure may be nested.

   ══════════════════════════════════════════════════════════════════════════

   [656](top) [657](keywords) [658](index)

  10.18. INCLUDE "filename"

   Another component that is frequently used is to 'link' an additional
   source file together with the current source file. Usually this contains
   variable definitions that are commonly used by several modules in a
   project. This makes sense since there is no idea in copying the same
   information into several files - it simply uses redundant space of your
   storage media. This is certainly important on the [659]Z88 which not
   always has huge amounts of installed user/system RAM (usually 128K). The
   external source file will be included at the position of the [660]INCLUDE
   directive.

   The format of the filename depends on the operating system platform. As
   with the current source file, you may also insert files in include files.
   There is no limit of how many levels (of files) you specify of include
   files. Recursive or mutually recursive [661]INCLUDE files (an [662]INCLUDE
   file calling itself) is not possible - the assembler program will
   immediately return an error message back to you!

   Include files are usually put at the start of the source file module but
   may be placed anywhere in the source text. The current source file will be
   continued after the [663]INCLUDE directive when the included file has been
   parsed to the end of file.

   ══════════════════════════════════════════════════════════════════════════

   [664](top) [665](keywords) [666](index)

  10.19. INVOKE <16-bit expression>

   Special [667]CALL instruction for the Ti83 calculator; it is coded as a
   RST 28H followed by the 16-bit expression, if the [668]-plus option is
   passed on the command line (for the Ti83Plus), or as a normal [669]CALL
   instruction if the option is not passed.

   ══════════════════════════════════════════════════════════════════════════

   [670](top) [671](keywords) [672](index)

  10.20. LIB name {,name}

   This directive is obsolete. It has been replaced by the [673]EXTERN
   directive (See changelog.txt at the root of the z88dk project).

   ══════════════════════════════════════════════════════════════════════════

   [674](top) [675](keywords) [676](index)

  10.21. LINE <32-bit expr> [ , "file-name" ]

   Used when the assembler is used as the back-end of a compiler to
   synchronize the line numbers in error messages to the lines from the
   compiled source.

   ══════════════════════════════════════════════════════════════════════════

   [677](top) [678](keywords) [679](index)

  10.22. LSTOFF

   Switches listing output to file off temporarily. The listing file is not
   closed.

   ══════════════════════════════════════════════════════════════════════════

   [680](top) [681](keywords) [682](index)

  10.23. LSTON

   Enables listing output (usually from a previous [683]LSTOFF ). Both
   directives may be useful when information from [684]INCLUDE files is
   redundant in the listing file, e.g. operating system definitions.

   ══════════════════════════════════════════════════════════════════════════

   [685](top) [686](keywords) [687](index)

  10.24. MODULE name

   This defines the name of the current module. This may be defined only once
   for a module. All source file modules contain a module name. This name is
   used by the assembler when creating address map files and for searching
   routines in libraries. Further, it allows the programmer to choose a
   well-defined name for the source file module. The position of the module
   name is of no importance; it may be placed at the end or the start of the
   source file. However, it has more sense to put it at the top. The syntax
   is simple - specify a legal identifier name after the [688]MODULE
   directive, e.g. [689]MODULE main_module

   ══════════════════════════════════════════════════════════════════════════

   [690](top) [691](keywords) [692](index)

  10.25. ORG <16-bit expression>

   Define address origin of compiled machine code - the position in memory
   where the machine is to be loaded and executed. The expression must be
   evaluable (containing no forward or external references). All address
   references will be calculated from the defined [693]ORG value. The
   [694]ORG address will be placed in the current module that is being
   compiled. However, during linking only the first object module is being
   read for an [695]ORG address. The [696]ORG is ignored during linking if
   you have specified an [697]-r option on the command line.

   When assembling programs with multiple sections, a section without an
   [698]ORG will be appended to the end of the previous section. A section
   with a defined [699]ORG will generate its own binary file, e.g.
   file_CODE.asm.

   A section may contain [700]ORG -1 to tell the linker to split the binary
   file of this section, but continue the addresses sequence from the
   previous section.

   ══════════════════════════════════════════════════════════════════════════

   [701](top) [702](keywords) [703](index)

  10.26. PUBLIC name {, name}

   This directive declares symbols publicly available for other modules
   during the linking phase of the compilation process.

   ══════════════════════════════════════════════════════════════════════════

   [704](top) [705](keywords) [706](index)

  10.27. XDEF name {, name}

   This directive is obsolete. It has been replaced by the [707]PUBLIC
   directive (See changelog.txt at the root of the z88dk project).

   ══════════════════════════════════════════════════════════════════════════

   [708](top) [709](keywords) [710](index)

  10.28. XLIB name

   This directive is obsolete. It has been replaced by the [711]PUBLIC
   directive (See changelog.txt at the root of the z88dk project).

   ══════════════════════════════════════════════════════════════════════════

   [712](top) [713](keywords) [714](index)

  10.29. XREF name {, name}

   This directive is obsolete. It has been replaced by the [715]EXTERN
   directive (See changelog.txt at the root of the z88dk project).

   ══════════════════════════════════════════════════════════════════════════

   [716](top) [717](keywords) [718](index)

11. Run time error messages

   The following error messages will be written toe the error files
   corresponding to each source file, and also to stderr. Each error message
   will contain the name of the source file and a line number where the error
   occurred in the file.

     • "File open/read error"
       You have tried to access a file that either was not found, already
       opened by other resources, or the assembler wasn't able to create
       output files (object file, listing-, symbol-, map- or executable
       binary file).

     • "Syntax error"
       This is a message used by many routines - hence the general but
       descriptive message. You have tried to use illegal registers in
       [719]Z80 mnemonic instructions, specified an illegal parameter type
       (string instead of integer), omitted a parameter ( [720]DEFB without
       constant).

     • "Symbol not defined"
       This error is given if you are referring to an identifier (usually in
       an address reference) that was not declared. Either a label definition
       is missing in the current module or you have forgotten to declare an
       identifier as external using the [721]XREF directive.

     • "Not enough memory" / "No room in [722]Z88 "
       Well, well. It seems that there wasn't enough room to hold the
       internal data structures during parsing or linking your code. Delete
       any unnecessary running applications/jobs then try again. If you got
       the message on the [723]Z88 , try also to delete unnecessary files
       from the filing system of your current RAM card.

     • "Integer out of range"
       You have an expression which evaluates into a constant that are beyond
       the legal integer range (e.g. trying to store a 16-bit value into an
       8-bit parameter).

     • "Syntax error in expression"
       Quite clearly you have made an illegal expression, e.g. specifying two
       following operands without an operator to separate them, used an
       illegal constant specifier or using illegal characters that aren't a
       legal identifier.

     • "Right bracket missing"
       Your expression is using brackets and is not properly balanced, i.e.
       too many beginning brackets or too few ending brackets.

     • "Source filename missing"
       There has not been specified any source file modules or project file
       to start a compilation.

     • "Illegal option"
       The command line parser couldn't recognise the -option. Remember to
       specify your option in EXACT case size. You have probably used a space
       between an option and a filename parameter.

     • "Unknown identifier"
       The parser expected a legal identifier, i.e. a directive or [724]Z80
       mnemonic. You have probably omitted the '.' in front of a label
       definition, misspelled a name or used a comment without a leading ';'.

     • "Illegal identifier"
       You have been trying to use a name that is either not known to the
       parser or an illegal identifier. This might happen if you try to use a
       register that is not allowed in a LD instruction, e.g. LD A,F .

     • "Max. code size reached"
       Is that really possible? Very interesting code of yours! [725]Z80
       machine code program tend to be in the 32K range (at least on the
       [726]Z88 )... Well, the [727]Z80 processor cannot address more than
       64K. Start changing your code to a smaller size!

     • "errors occurred during assembly"
       Status error message displayed on the screen when the assembler has
       completed its parsing on all modules. You have one or more errors to
       correct in your source files before the assembler continues with
       linking the next time.

     • "Symbol already defined"
       In the current source file, you have tried to create two identical
       address label definitions, or other name identifier creators (using
       [728]DEFC , [729]DEFVARS , [730]DEFGROUP ).

     • "Module name already defined"
       You have used the [731]MODULE directive more than once in your source
       file, or used both a [732]MODULE and [733]XLIB directive (library
       modules only need an [734]XLIB ).

     • "Symbol already declared local"
       You have tried to declare a symbol as [735]XREF , but it was already
       defined local, eg. using a ".lbaddr" in your source.

     • "Illegal source filename"
       You have tried to specify an option after having begun to specify
       filenames. Options must always be specified before filenames or
       project files.

     • "Symbol declared global in another module"
       You have two identical [736]XDEF definitions in separate modules. One
       of them should probably be an [737]XREF instead.

     • "Re-declaration not allowed"
       You are trying to specify an [738]XDEF for a name that has already
       been [739]XREF 'ed in the same module (or the other way around).

     • " [740]ORG already defined"
       Only one [741]ORG statement is allowed per section.

     • "Relative jump address must be local"
       You have tried to JR to a label address that is declared as external
       (with [742]XREF or [743]LIB ). JR must be performed in the current
       source file module.

     • "Not a relocatable file" / "Not an object file"
       The assembler opened a supposed object file (with the proper ".obj"
       extension) but realised it wasn't conforming to the [744]Z80 assembler
       standard object file format.

     • "Couldn't open library file"
       The library file was found but couldn't be opened (probably already
       opened by another application resource)

     • "Not a library file"
       Your library file is not a library file (at least is not of the
       correct file format used by this assembler). Have you maybe used
       another "library" file? The [745]Z80 library file could also be
       corrupted (at least in the header).

     • "Environment variable not defined"
       The assembler reports either the " [746]Z80 _STDLIB" environment
       variable wasn't found when used by options [747]-x and [748]-i .

     • "Cannot include file recursively"
       A file was tried to be included which was already included at a
       previous include level. [749]INCLUDE "a.h" cannot contain an
       [750]INCLUDE "a.h".

   ══════════════════════════════════════════════════════════════════════════

   [751](top) [752](keywords) [753](index)

12. Backlog

     • Doing

          • Implement -E to generate pre-processed output in a .i file

     • Preprocessor

          • Parse TASM input
          • Parse Z80MR input
          • high level structures
          • macros
          • architecture-specific macro-like opcodes
          • architecture-specific character encoding
          • JR to JP optimization for speed
          • preprocessor
          • separate scanner from preprocessor

     • Assembler

          • JP to JR optimization for size
          • compile expressions
          • object files store list of input files and command line so that
            [754]-d can decide if it is necessary to recompile
          • object files can store same code for multiple architectures
          • recursive parsing of @lists
          • environment variable to pass options to assembler
          • parse expressions

     • Linker

          • section groups
          • overlays
          • absolute memory areas with holes

     • Librarian

          • object files and library files have an index of all defined
            symbols

     • Unsorted Backlog

          • compute compile-time constants
          • execute compile-time [755]IF /ELSE/ENDIF
          • do not process preprocessor directives in the false branch of
            [756]IF
            fails building z88dk because [757]INCLUDE of unexistent file
            guarded by [758]IF FALSE is processed and assembly fails
          • process C_LINE
          • fix list files when parsing a .i
          • move all directives from z80asm to z80asm2
          • handle [759]-m for architecture specific code
          • handle [760]-D and -U for top-level defines
          • process [761]INCLUDE / INCBIN / [762]BINARY
          • generate .i file
          • indicate syntax error location
          • process labels
          • process [763]INCLUDE
          • process [764]BINARY /INCBIN
          • bug rst label
          • Implement recursive includes in Coco/R parser/scanner
          • Separate standard [765]Z80 assembly from extensions; add macro
            files for extensions.
          • Port to C++
          • Parse command line
          • Input source
          • Preprocess
          • Lexing
          • Parsing
          • Symbol Table
          • Object Files
          • Assembling
          • Linking
          • List file
          • allow EQU as synonym to [766]DEFC
          • finish the split between front-end and back-end;
          • implement an expression parser with a parser generator, to get
            rid of the need to write a '#' to tell the assembler something it
            should know: a difference between two addresses is a constant;
          • add an additional step to automatically change JR into JP if the
            distance is too far;
          • implement macros inside the assembler
          • add high level constructs ( [767]IF flag / ELSE / ENDIF, DO WHILE
            flag, ...)
          • add a rule based optimizer based on RAGEL as a state machine
            generator
          • --icase option
          • --c-strings or --asm-strings
          • architectire-dependent character mapping
          • Test: jr: jr jr
          • Need option to debug pre-processing and macro expansion - -E
          • Add one opcode
          • Separate standard [768]Z80 assembly from extensions; add macro
            files for extensions
          • Preprocess
          • Parsing
          • Symbol Table
          • Object Files
          • Assembling
          • Linking
          • List file
          • allow EQU as synonym to [769]DEFC
          • finish the split between front-end and back-end;
          • implement an expression parser with a parser generator, to get
            rid of the need to write a '#' to tell the assembler something it
            should know: a difference between two addresses is a constant;
          • add an additional step to automatically change JR into JP if the
            distance is too far;
          • cleanup the symbol table to implement the [770]GLOBAL suggestion:
            declare a symbol [771]GLOBAL and it is [772]PUBLIC if defined, or
            [773]EXTERN otherwise
          • implement macros inside the assembler
          • add high level constructs ( [774]IF flag / ELSE / ENDIF, DO WHILE
            flag, ...)
          • add a rule based optimizer based on RAGEL as a state machine
            generator
          • BUG_0038: library modules not loaded in sequence: The library
            modules loaded to the linked binary file should respect the order
            given on the command line.
          • generate .err files with errors
          • show source line and syntax error location
          • section name: introduces a new section at the end of the current
            list
          • section name before name: introduces a new section before the
            given section
          • section name after name: introduces a new section after the given
            name
          • org:

         1. Any section with an [775]ORG address starts a new area of code
            and generates a new binary output file, named
            <first_module_name>_<section_name>.bin
         2. Any section that has no [776]ORG address gets packed at the end
            of the previous section.

          • The null section is only special in the sense that the code is
            output to <first_module_name>.bin, and that it's [777]ORG address
            can be defined in the command line via -rhhhh.

          • simplify expressions to tranform LABEL1-LABEL2 into a constant

          • --icase option

          • --c-strings or --asm-strings

          • architecture-dependent character mapping

          • Test: jr: jr jr

          • Need option to debug pre-processing and macro expansion - -E

          • Add one opcode

          • Separate standard [778]Z80 assembly from extensions; add macro
            files for extensions

          • Preprocess

          • Parsing

          • Symbol Table

          • Object Files

          • Assembling

          • Linking

          • List file

          • allow EQU as synonym to [779]DEFC

          • finish the split between front-end and back-end;

          • implement an expression parser with a parser generator, to get
            rid of the need to write a '#' to tell the assembler something it
            should know: a difference between two addresses is a constant;

          • add an additional step to automatically change JR into JP if the
            distance is too far;

          • cleanup the symbol table to implement the [780]GLOBAL suggestion:
            declare a symbol [781]GLOBAL and it is [782]PUBLIC if defined, or
            [783]EXTERN otherwise

          • implement macros inside the assembler

          • add high level constructs ( [784]IF flag / ELSE / ENDIF, DO WHILE
            flag, ...)

          • add a rule based optimizer based on RAGEL as a state machine
            generator

          • BUG_0038: library modules not loaded in sequence: The library
            modules loaded to the linked binary file should respect the order
            given on the command line.

          • generate .err files with errors

          • show source line and syntax error location

          • Manage libraries

          • Link object files and libraries

          • Split object files in modules, link each module separately

          • :: to define public symbol

          • to declare external symbol

          • #include

          • #define

          • #macro

          • Implement recursive includes in Coco/R parser/scanner

          • Separate standard [785]Z80 assembly from extensions; add macro
            files for extensions.

          • Port to C++

          • Parse command line

          • Input source

          • Preprocess

          • Lexing

          • Parsing

          • Symbol Table

          • Object Files

          • Assembling

          • Linking

          • List file

          • allow EQU as synonym to [786]DEFC

          • finish the split between front-end and back-end;

          • implement an expression parser with a parser generator, to get
            rid of the need to write a '#' to tell the assembler something it
            should know: a difference between two addresses is a constant;

          • add an additional step to automatically change JR into JP if the
            distance is too far;

          • implement macros inside the assembler

          • add high level constructs ( [787]IF flag / ELSE / ENDIF, DO WHILE
            flag, ...)

          • add a rule based optimizer based on RAGEL as a state machine
            generator

          • Errors are only output on stderr, *.err files are not created.
            *.err files are a leftover from operating systems that could not
            redirect standard error.

            Fatal errors example:

    x.cc:1:18: fatal error: nofile: No such file or directory
         \#include "nofile"
         ------------------^
    compilation terminated.

 Non-fatal errors example:

    x.cc:1:7: error: expected initializer before 'b'
         int a b
         -------^




   ══════════════════════════════════════════════════════════════════════════

   [788](top) [789](keywords) [790](index)

13. References

     • [791]The Telemark Assembler

   ══════════════════════════════════════════════════════════════════════════

   [792](top) [793](keywords) [794](index)

14. Copyright

   The original z80asm module assembler was written by Gunther Strube. It was
   converted from QL SuperBASIC version 0.956, initially ported to Lattice C,
   and then to C68 on QDOS.

   It has been maintained since 2011 by Paulo Custodio.

   Copyright (C) Gunther Strube, InterLogic 1993-99
   Copyright (C) Paulo Custodio, 2011-2020

   ══════════════════════════════════════════════════════════════════════════

   [795](top) [796](keywords) [797](index)

15. License

   Artistic License 2.0 [798]http://www.perlfoundation.org/artisticlicense2_0

   ══════════════════════════════════════════════════════════════════════════

   [799](top) [800](keywords) [801](index)

16. Keywords

   [802]-C [803]-D [804]-I [805]-IXIY [806]-L [807]-M [808]-R [809]-RCMX000
   [810]-a [811]-atoctal [812]-b [813]-d [814]-dotdirective [815]-e [816]-g
   [817]-h [818]-hashhex [819]-i [820]-l [821]-labelcol1 [822]-m [823]-noprec
   [824]-o [825]-plus [826]-r [827]-s [828]-t [829]-ucase [830]-v [831]-x
   [832]BINARY [833]CALL [834]DEFB [835]DEFC [836]DEFGROUP [837]DEFINE
   [838]DEFL [839]DEFM [840]DEFS [841]DEFVARS [842]DEFW [843]EXTERN [844]FPP
   [845]GLOBAL [846]IF [847]IFDEF [848]IFNDEF [849]INCLUDE [850]INVOKE
   [851]LIB [852]LINE [853]LSTOFF [854]LSTON [855]MODULE [856]ORG [857]PUBLIC
   [858]XDEF [859]XLIB [860]XREF [861]Z80 [862]Z88

   ══════════════════════════════════════════════════════════════════════════

   [863](top) [864](keywords) [865](index)

17. Index

     • [866]1. Usage ...

          • [867]1.1. ... as pre-processor
          • [868]1.2. ... as assembler
          • [869]1.3. ... as linker
          • [870]1.4. ... as librarian

     • [871]2. Options

          • [872]2.1. General Options

               • [873]2.1.1. [874]-v (verbose)

          • [875]2.2. Preprocessor options

               • [876]2.2.1. [877]-atoctal (at is octal prefix)
               • [878]2.2.2. [879]-dotdirective (period is directive prefix)
               • [880]2.2.3. [881]-hashhex (hash is hex prefix)
               • [882]2.2.4. [883]-labelcol1 (labels at column 1)
               • [884]2.2.5. [885]-ucase (upper case)
               • [886]2.2.6. [887]-IXIY (swap IX and IY)

          • [888]2.3. Assembly options

               • [889]2.3.1. [890]-noprec (no precedence in expression
                 evaluation)

     • [891]3. Input Files

          • [892]3.1. Source File Format
          • [893]3.2. Comments
          • [894]3.3. Symbols
          • [895]3.4. Labels
          • [896]3.5. Numbers

               • [897]3.5.1. Decimal
               • [898]3.5.2. Hexadecimal
               • [899]3.5.3. Octal
               • [900]3.5.4. Binary
               • [901]3.5.5. Bitmaps

          • [902]3.6. Keywords
          • [903]3.7. Directives and Opcodes

     • [904]4. Object File Format

          • [905]4.1. Object Files
          • [906]4.2. Library File Format
          • [907]4.3. Format History

     • [908]5. z80asm Syntax

          • [909]5.1. Help page
          • [910]5.2. Command line
          • [911]5.3. Command line options

               • [912]5.3.1. [913]-h : Show help screen
               • [914]5.3.2. [915]-e <ext> : Use alternative source file
                 extension
               • [916]5.3.3. [917]-M <ext> : Use alternative object file
                 extension
               • [918]5.3.4. [919]-l : Create listing file output
               • [920]5.3.5. [921]-s : Create symbol table
               • [922]5.3.6. [923]-d : Assemble only updated files
               • [924]5.3.7. [925]-b : Link/relocate object files
               • [926]5.3.8. [927]-a : Combine [928]-d and [929]-b
               • [930]5.3.9. [931]-o <binary-filename> : Binary filename
               • [932]5.3.10. [933]-m : Create address map information file
               • [934]5.3.11. [935]-r <hex-address> : Re-define the [936]ORG
                 relocation address
               • [937]5.3.12. [938]-R : Generate address independent code
               • [939]5.3.13. [940]-g : Create global address definition file
               • [941]5.3.14. [942]-D <symbol> : Define a static symbol
               • [943]5.3.15. @<project-file> :1.3.16. Using a project file
               • [944]5.3.16. [945]-i <library-file> : Include library
                 modules during linking/relocation
               • [946]5.3.17. [947]-L <library-path> : Add directory to
                 search path for libraries
               • [948]5.3.18. [949]-I <include-path> : Add directory to
                 search path for [950]INCLUDE
               • [951]5.3.19. [952]-x : Create a library
               • [953]5.3.20. [954]-t <number> : Define tabulator distance
                 for text output files
               • [955]5.3.21. [956]-RCMX000 : Support the RCM2000/RCM3000
                 series of [957]Z80 -like CPU's
               • [958]5.3.22. [959]-plus : Support for the Ti83Plus
               • [960]5.3.23. [961]-C : Enable [962]LINE directive

          • [963]5.4. The [964]Z88 operating system definition files
          • [965]5.5. The supplied standard library [966]Z80 source files
          • [967]5.6. [968]Z88 module assembler application source
          • [969]5.7. File based compilation
          • [970]5.8. Modular source file design
          • [971]5.9. Scope of symbols in source modules
          • [972]5.10. Using arithmetic and relational expressions
          • [973]5.11. Source file manipulation
          • [974]5.12. Free format of assembler source files
          • [975]5.13. Specification of filenames
          • [976]5.14. Including other source files into the current source
            file
          • [977]5.15. Conditional assembly in source file modules
          • [978]5.16. Undocumented [979]Z80 instruction code generation
          • [980]5.17. Object file generation
          • [981]5.18. Transfer of object files across platforms
          • [982]5.19. Date stamp controlled assembly
          • [983]5.20. Listing files
          • [984]5.21. Symbol information
          • [985]5.22. Linking and relocation of object modules into
            executable [986]Z80 machine code
          • [987]5.23. Address map files
          • [988]5.24. Symbol address definition files
          • [989]5.25. Error files
          • [990]5.26. Creating and using object file libraries for standard
            routines

     • [991]6. Executing the cross assembler and environment variables

          • [992]6.1. The environment variables
          • [993]6.2. Running in the QDOS/SMSQ operating system environment
          • [994]6.3. Running in the LINUX/UNIX operating system environment
          • [995]6.4. Running in the MS-DOS operating system environment

     • [996]7. [997]Z80 module assembler file types

          • [998]7.1. The assembler file types and their extension names
          • [999]7.2. The file name extension identifier
          • [1000]7.3. File types

               • [1001]7.3.1. The source file extension, asm
               • [1002]7.3.2. The object file extension, obj
               • [1003]7.3.3. The error file extension, err
               • [1004]7.3.4. The listing file extension, lst
               • [1005]7.3.5. The symbol file extension, sym
               • [1006]7.3.6. The executable file extension, bin
               • [1007]7.3.7. The address map file extension, map
               • [1008]7.3.8. The definition file extension, def
               • [1009]7.3.9. The library file extension, lib

     • [1010]8. Compiling files

          • [1011]8.1. The assembler compiling process

               • [1012]8.1.1. Stage 1, parsing and code generation of all
                 source files, object file generation
               • [1013]8.1.2. Stage 2, linking object files and library
                 modules, producing executable code

          • [1014]8.2. File names
          • [1015]8.3. Portability of assembler file names
          • [1016]8.4. Source file structure
          • [1017]8.5. Using local, global and external symbols
          • [1018]8.6. Defining symbol names
          • [1019]8.7. Comments in source files
          • [1020]8.8. Defining symbolic address labels
          • [1021]8.9. Writing [1022]Z80 mnemonic instructions
          • [1023]8.10. Optional [1024]Z80 mnemonic instruction syntax
          • [1025]8.11. The undocumented [1026]Z80 instructions
          • [1027]8.12. Referencing library routines
          • [1028]8.13. Creating/updating libraries
          • [1029]8.14. Referencing routines in other compiled projects

     • [1030]9. Using expressions

          • [1031]9.1. Constant identifiers
          • [1032]9.2. Arithmetic operators
          • [1033]9.3. Relational operators
          • [1034]9.4. The ASMPC standard function
          • [1035]9.5. Symbol identifiers in expressions

     • [1036]10. Directive reference

          • [1037]10.1. [1038]BINARY "filename"
          • [1039]10.2. [1040]CALL _OZ <expression>
          • [1041]10.3. [1042]DEFB <8-bit expr>,{<8-bit expr>} (-128; 255)
          • [1043]10.4. [1044]DEFW <16-bit expr>,{<16-bit expr>} (-32768;
            65535)
          • [1045]10.5. [1046]DEFL <32-bit expr>,{<32-bit expr>}
            (-2147483647; 4294967295)
          • [1047]10.6. [1048]DEFC name=<32-bit expression>{, name=<32-bit
            expression>}
          • [1049]10.7. [1050]DEFM <string expression>|<8-bit expr>,...
          • [1051]10.8. [1052]DEFGROUP '{' name {',' name ['=' <8-bit
            expression>]} '}'
          • [1053]10.9. [1054]DEFINE name,{name}
          • [1055]10.10. [1056]DEFS <size>{, <fill-byte>}
          • [1057]10.11. [1058]DEFVARS <16-bit expression> '{' [<name>]
            [<storage_size> <size_multiplier>] '}'
          • [1059]10.12. [1060]EXTERN name {, name}
          • [1061]10.13. [1062]FPP <8-bit expression>
          • [1063]10.14. [1064]GLOBAL name {, name}
          • [1065]10.15. [1066]IF <logical expression> ... [ELSE] ... ENDIF
          • [1067]10.16. [1068]IFDEF <name> ... [ELSE] ... ENDIF
          • [1069]10.17. [1070]IFNDEF <name> ... [ELSE] ... ENDIF
          • [1071]10.18. [1072]INCLUDE "filename"
          • [1073]10.19. [1074]INVOKE <16-bit expression>
          • [1075]10.20. [1076]LIB name {,name}
          • [1077]10.21. [1078]LINE <32-bit expr> [ , "file-name" ]
          • [1079]10.22. [1080]LSTOFF
          • [1081]10.23. [1082]LSTON
          • [1083]10.24. [1084]MODULE name
          • [1085]10.25. [1086]ORG <16-bit expression>
          • [1087]10.26. [1088]PUBLIC name {, name}
          • [1089]10.27. [1090]XDEF name {, name}
          • [1091]10.28. [1092]XLIB name
          • [1093]10.29. [1094]XREF name {, name}

     • [1095]11. Run time error messages
     • [1096]12. Backlog
     • [1097]13. References
     • [1098]14. Copyright
     • [1099]15. License
     • [1100]16. Keywords
     • [1101]17. Index

    

References

   Visible links
   1. http://www.z88dk.org/
   2. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#7_
   3. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
   4. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
   5. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
   6. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
   7. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
   8. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
   9. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
  10. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
  11. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
  12. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
  13. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
  14. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
  15. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_7_
  16. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
  17. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
  18. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
  19. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_19_
  20. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_16_
  21. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
  22. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
  23. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
  24. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
  25. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
  26. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
  27. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
  28. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
  29. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
  30. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#2_1_1_
  31. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
  32. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
  33. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
  34. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
  35. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
  36. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
  37. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#2_2_1_
  38. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
  39. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
  40. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
  41. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#2_2_2_
  42. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
  43. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
  44. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
  45. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#2_2_3_
  46. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
  47. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
  48. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
  49. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#2_2_2_
  50. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#2_2_4_
  51. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
  52. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
  53. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
  54. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#2_2_5_
  55. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
  56. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
  57. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
  58. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
  59. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
  60. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
  61. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
  62. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
  63. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
  64. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#2_3_1_
  65. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
  66. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
  67. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
  68. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_10_
  69. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
  70. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
  71. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
  72. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#2_2_4_
  73. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
  74. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
  75. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
  76. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
  77. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
  78. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
  79. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#2_2_5_
  80. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
  81. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
  82. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
  83. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#2_2_2_
  84. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#2_2_4_
  85. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
  86. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
  87. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
  88. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#2_3_1_
  89. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
  90. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
  91. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
  92. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
  93. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
  94. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
  95. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#2_2_3_
  96. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
  97. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
  98. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
  99. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#2_2_1_
 100. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 101. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 102. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 103. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#2_2_1_
 104. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 105. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 106. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 107. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 108. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 109. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 110. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 111. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 112. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 113. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_25_
 114. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_18_
 115. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 116. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 117. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 118. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#7_
 119. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#7_
 120. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 121. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 122. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 123. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_25_
 124. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_25_
 125. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_25_
 126. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_25_
 127. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 128. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 129. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 130. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 131. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 132. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 133. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_6_
 134. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_25_
 135. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 136. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 137. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 138. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#7_
 139. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#7_
 140. mailto:gbs@image.dk
 141. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#7_
 142. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 143. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 144. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 145. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_1_
 146. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 147. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 148. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 149. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 150. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 151. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 152. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 153. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 154. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 155. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 156. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 157. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 158. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 159. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 160. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 161. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 162. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 163. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 164. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 165. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 166. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 167. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 168. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 169. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 170. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#7_
 171. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#7_
 172. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_6_
 173. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_6_
 174. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 175. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 176. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 177. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_7_
 178. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#7_
 179. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_8_
 180. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_6_
 181. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_25_
 182. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_25_
 183. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_25_
 184. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_25_
 185. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_11_
 186. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_25_
 187. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 188. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 189. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 190. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_7_
 191. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_6_
 192. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 193. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 194. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 195. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 196. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 197. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 198. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 199. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 200. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 201. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_25_
 202. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_11_
 203. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_11_
 204. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_25_
 205. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_25_
 206. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_6_
 207. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_25_
 208. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_11_
 209. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 210. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 211. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 212. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#7_
 213. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#7_
 214. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#7_
 215. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_25_
 216. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_12_
 217. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_8_
 218. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_7_
 219. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_6_
 220. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_2_
 221. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_12_
 222. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#7_
 223. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_25_
 224. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#7_
 225. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 226. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 227. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 228. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_6_
 229. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_27_
 230. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_25_
 231. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_11_
 232. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_6_
 233. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_6_
 234. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_6_
 235. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 236. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 237. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 238. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_6_
 239. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 240. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 241. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 242. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 243. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 244. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 245. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_16_
 246. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#7_
 247. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 248. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 249. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 250. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 251. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 252. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 253. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_18_
 254. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 255. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 256. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 257. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_19_
 258. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_16_
 259. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#7_
 260. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_28_
 261. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#7_
 262. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 263. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 264. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 265. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#7_
 266. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_27_
 267. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_20_
 268. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 269. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 270. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 271. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#7_
 272. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 273. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 274. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 275. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_19_
 276. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_2_
 277. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 278. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 279. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 280. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_21_
 281. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 282. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 283. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 284. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_6_
 285. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 286. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 287. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 288. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_6_
 289. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#7_
 290. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#7_
 291. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 292. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 293. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 294. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_6_
 295. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_6_
 296. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#7_
 297. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 298. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 299. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 300. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 301. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 302. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 303. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 304. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 305. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 306. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_12_
 307. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_26_
 308. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_12_
 309. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_26_
 310. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_14_
 311. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 312. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 313. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 314. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#7_
 315. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 316. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 317. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 318. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 319. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 320. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 321. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#7_
 322. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 323. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 324. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 325. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 326. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 327. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 328. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 329. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 330. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 331. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_15_
 332. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_16_
 333. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_17_
 334. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 335. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 336. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 337. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#7_
 338. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_6_
 339. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 340. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 341. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 342. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#7_
 343. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 344. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 345. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 346. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#7_
 347. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 348. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 349. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 350. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 351. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 352. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 353. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#7_
 354. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 355. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 356. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 357. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 358. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 359. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 360. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#7_
 361. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_25_
 362. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 363. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 364. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 365. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 366. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 367. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 368. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 369. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 370. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 371. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 372. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 373. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 374. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 375. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 376. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 377. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 378. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 379. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 380. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#7_
 381. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#7_
 382. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_6_
 383. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 384. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 385. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 386. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 387. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 388. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 389. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 390. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 391. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 392. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 393. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 394. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 395. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 396. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 397. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 398. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#7_
 399. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 400. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 401. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 402. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 403. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 404. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 405. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 406. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 407. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 408. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_2_
 409. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 410. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 411. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 412. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_3_
 413. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 414. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 415. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 416. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 417. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 418. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 419. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#7_
 420. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 421. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 422. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 423. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 424. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 425. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 426. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#7_
 427. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#7_
 428. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_9_
 429. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_9_
 430. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 431. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 432. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 433. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 434. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 435. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 436. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 437. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 438. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 439. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_19_
 440. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_16_
 441. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 442. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 443. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 444. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 445. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 446. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 447. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#7_
 448. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 449. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 450. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 451. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#7_
 452. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#7_
 453. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 454. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 455. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 456. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_25_
 457. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 458. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 459. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 460. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 461. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 462. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 463. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#7_
 464. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 465. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 466. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 467. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_6_
 468. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 469. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 470. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 471. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#7_
 472. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_29_
 473. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_27_
 474. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_29_
 475. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_27_
 476. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_20_
 477. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 478. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 479. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 480. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#7_
 481. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_6_
 482. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_6_
 483. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_6_
 484. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_6_
 485. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_18_
 486. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_6_
 487. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_11_
 488. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_6_
 489. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_11_
 490. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#7_
 491. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_11_
 492. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_11_
 493. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_8_
 494. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 495. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 496. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 497. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#7_
 498. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#7_
 499. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#7_
 500. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 501. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 502. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 503. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_26_
 504. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_26_
 505. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 506. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 507. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 508. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#7_
 509. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_2_
 510. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 511. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 512. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 513. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 514. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 515. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 516. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#7_
 517. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_6_
 518. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_6_
 519. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 520. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 521. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 522. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_16_
 523. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_20_
 524. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_20_
 525. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 526. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 527. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 528. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_28_
 529. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_20_
 530. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_28_
 531. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_19_
 532. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#7_
 533. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 534. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 535. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 536. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_13_
 537. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_6_
 538. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_27_
 539. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_8_
 540. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_13_
 541. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_7_
 542. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_18_
 543. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_27_
 544. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_18_
 545. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_6_
 546. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_29_
 547. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_13_
 548. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_29_
 549. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_18_
 550. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_6_
 551. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_13_
 552. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_29_
 553. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_27_
 554. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_13_
 555. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 556. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 557. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 558. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#7_
 559. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#7_
 560. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#7_
 561. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#7_
 562. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 563. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 564. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 565. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 566. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 567. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 568. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 569. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 570. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 571. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_15_
 572. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 573. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 574. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 575. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 576. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 577. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 578. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_29_
 579. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_20_
 580. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 581. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 582. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 583. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#7_
 584. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#7_
 585. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#7_
 586. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 587. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 588. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 589. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_1_
 590. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 591. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 592. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 593. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_6_
 594. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 595. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 596. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 597. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 598. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 599. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 600. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 601. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 602. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 603. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 604. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 605. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 606. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_6_
 607. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_6_
 608. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 609. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 610. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 611. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_7_
 612. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 613. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 614. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 615. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_8_
 616. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_8_
 617. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_8_
 618. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_6_
 619. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 620. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 621. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 622. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 623. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 624. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 625. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_10_
 626. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 627. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 628. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 629. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_11_
 630. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_11_
 631. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_11_
 632. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 633. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 634. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 635. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_26_
 636. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 637. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 638. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 639. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_6_
 640. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_6_
 641. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 642. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 643. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 644. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_14_
 645. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_26_
 646. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_12_
 647. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 648. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 649. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 650. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 651. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 652. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 653. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 654. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 655. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 656. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 657. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 658. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 659. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_6_
 660. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_18_
 661. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_18_
 662. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_18_
 663. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_18_
 664. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 665. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 666. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 667. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_2_
 668. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_22_
 669. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_2_
 670. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 671. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 672. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 673. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_12_
 674. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 675. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 676. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 677. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 678. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 679. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 680. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 681. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 682. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 683. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_22_
 684. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_18_
 685. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 686. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 687. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 688. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_24_
 689. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_24_
 690. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 691. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 692. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 693. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_25_
 694. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_25_
 695. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_25_
 696. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_25_
 697. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_11_
 698. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_25_
 699. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_25_
 700. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_25_
 701. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 702. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 703. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 704. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 705. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 706. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 707. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_26_
 708. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 709. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 710. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 711. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_26_
 712. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 713. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 714. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 715. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_12_
 716. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 717. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 718. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 719. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#7_
 720. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_3_
 721. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_29_
 722. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_6_
 723. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_6_
 724. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#7_
 725. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#7_
 726. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_6_
 727. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#7_
 728. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_6_
 729. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_11_
 730. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_8_
 731. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_24_
 732. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_24_
 733. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_28_
 734. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_28_
 735. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_29_
 736. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_27_
 737. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_29_
 738. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_27_
 739. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_29_
 740. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_25_
 741. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_25_
 742. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_29_
 743. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_20_
 744. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#7_
 745. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#7_
 746. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#7_
 747. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_19_
 748. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_16_
 749. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_18_
 750. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_18_
 751. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 752. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 753. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 754. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_6_
 755. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_15_
 756. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_15_
 757. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_18_
 758. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_15_
 759. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_10_
 760. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_14_
 761. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_18_
 762. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_1_
 763. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_18_
 764. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_1_
 765. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#7_
 766. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_6_
 767. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_15_
 768. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#7_
 769. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_6_
 770. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_14_
 771. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_14_
 772. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_26_
 773. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_12_
 774. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_15_
 775. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_25_
 776. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_25_
 777. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_25_
 778. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#7_
 779. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_6_
 780. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_14_
 781. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_14_
 782. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_26_
 783. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_12_
 784. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_15_
 785. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#7_
 786. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_6_
 787. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_15_
 788. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 789. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 790. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 791. http://www.cpcalive.com/docs/TASMMAN.HTM
 792. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 793. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 794. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 795. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 796. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 797. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 798. Artistic License 2.0
	http://www.perlfoundation.org/artisticlicense2_0
 799. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 800. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 801. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 802. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_23_
 803. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_14_
 804. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_18_
 805. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#2_2_6_
 806. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_17_
 807. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_3_
 808. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_12_
 809. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_21_
 810. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_8_
 811. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#2_2_1_
 812. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_7_
 813. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_6_
 814. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#2_2_2_
 815. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_2_
 816. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_13_
 817. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_1_
 818. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#2_2_3_
 819. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_16_
 820. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_4_
 821. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#2_2_4_
 822. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_10_
 823. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#2_3_1_
 824. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_9_
 825. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_22_
 826. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_11_
 827. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_5_
 828. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_20_
 829. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#2_2_5_
 830. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#2_1_1_
 831. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_19_
 832. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_1_
 833. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_2_
 834. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_3_
 835. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_6_
 836. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_8_
 837. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_9_
 838. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_5_
 839. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_7_
 840. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_10_
 841. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_11_
 842. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_4_
 843. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_12_
 844. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_13_
 845. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_14_
 846. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_15_
 847. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_16_
 848. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_17_
 849. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_18_
 850. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_19_
 851. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_20_
 852. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_21_
 853. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_22_
 854. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_23_
 855. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_24_
 856. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_25_
 857. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_26_
 858. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_27_
 859. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_28_
 860. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_29_
 861. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#7_
 862. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_6_
 863. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#top
 864. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#keywords
 865. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#index
 866. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#1_
 867. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#1_1_
 868. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#1_2_
 869. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#1_3_
 870. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#1_4_
 871. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#2_
 872. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#2_1_
 873. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#2_1_1_
 874. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#2_1_1_
 875. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#2_2_
 876. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#2_2_1_
 877. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#2_2_1_
 878. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#2_2_2_
 879. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#2_2_2_
 880. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#2_2_3_
 881. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#2_2_3_
 882. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#2_2_4_
 883. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#2_2_4_
 884. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#2_2_5_
 885. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#2_2_5_
 886. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#2_2_6_
 887. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#2_2_6_
 888. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#2_3_
 889. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#2_3_1_
 890. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#2_3_1_
 891. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#3_
 892. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#3_1_
 893. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#3_2_
 894. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#3_3_
 895. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#3_4_
 896. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#3_5_
 897. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#3_5_1_
 898. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#3_5_2_
 899. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#3_5_3_
 900. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#3_5_4_
 901. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#3_5_5_
 902. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#3_6_
 903. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#3_7_
 904. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#4_
 905. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#4_1_
 906. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#4_2_
 907. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#4_3_
 908. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_
 909. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_1_
 910. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_2_
 911. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_
 912. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_1_
 913. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_1_
 914. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_2_
 915. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_2_
 916. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_3_
 917. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_3_
 918. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_4_
 919. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_4_
 920. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_5_
 921. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_5_
 922. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_6_
 923. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_6_
 924. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_7_
 925. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_7_
 926. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_8_
 927. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_8_
 928. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_6_
 929. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_7_
 930. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_9_
 931. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_9_
 932. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_10_
 933. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_10_
 934. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_11_
 935. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_11_
 936. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_25_
 937. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_12_
 938. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_12_
 939. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_13_
 940. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_13_
 941. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_14_
 942. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_14_
 943. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_15_
 944. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_16_
 945. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_16_
 946. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_17_
 947. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_17_
 948. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_18_
 949. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_18_
 950. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_18_
 951. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_19_
 952. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_19_
 953. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_20_
 954. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_20_
 955. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_21_
 956. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_21_
 957. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#7_
 958. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_22_
 959. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_22_
 960. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_23_
 961. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_3_23_
 962. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_21_
 963. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_4_
 964. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_6_
 965. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_5_
 966. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#7_
 967. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_6_
 968. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_6_
 969. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_7_
 970. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_8_
 971. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_9_
 972. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_10_
 973. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_11_
 974. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_12_
 975. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_13_
 976. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_14_
 977. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_15_
 978. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_16_
 979. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#7_
 980. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_17_
 981. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_18_
 982. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_19_
 983. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_20_
 984. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_21_
 985. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_22_
 986. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#7_
 987. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_23_
 988. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_24_
 989. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_25_
 990. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#5_26_
 991. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#6_
 992. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#6_1_
 993. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#6_2_
 994. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#6_3_
 995. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#6_4_
 996. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#7_
 997. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#7_
 998. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#7_1_
 999. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#7_2_
1000. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#7_3_
1001. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#7_3_1_
1002. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#7_3_2_
1003. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#7_3_3_
1004. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#7_3_4_
1005. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#7_3_5_
1006. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#7_3_6_
1007. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#7_3_7_
1008. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#7_3_8_
1009. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#7_3_9_
1010. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#8_
1011. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#8_1_
1012. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#8_1_1_
1013. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#8_1_2_
1014. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#8_2_
1015. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#8_3_
1016. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#8_4_
1017. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#8_5_
1018. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#8_6_
1019. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#8_7_
1020. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#8_8_
1021. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#8_9_
1022. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#7_
1023. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#8_10_
1024. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#7_
1025. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#8_11_
1026. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#7_
1027. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#8_12_
1028. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#8_13_
1029. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#8_14_
1030. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#9_
1031. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#9_1_
1032. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#9_2_
1033. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#9_3_
1034. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#9_4_
1035. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#9_5_
1036. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_
1037. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_1_
1038. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_1_
1039. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_2_
1040. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_2_
1041. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_3_
1042. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_3_
1043. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_4_
1044. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_4_
1045. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_5_
1046. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_5_
1047. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_6_
1048. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_6_
1049. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_7_
1050. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_7_
1051. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_8_
1052. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_8_
1053. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_9_
1054. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_9_
1055. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_10_
1056. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_10_
1057. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_11_
1058. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_11_
1059. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_12_
1060. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_12_
1061. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_13_
1062. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_13_
1063. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_14_
1064. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_14_
1065. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_15_
1066. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_15_
1067. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_16_
1068. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_16_
1069. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_17_
1070. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_17_
1071. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_18_
1072. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_18_
1073. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_19_
1074. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_19_
1075. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_20_
1076. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_20_
1077. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_21_
1078. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_21_
1079. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_22_
1080. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_22_
1081. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_23_
1082. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_23_
1083. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_24_
1084. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_24_
1085. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_25_
1086. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_25_
1087. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_26_
1088. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_26_
1089. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_27_
1090. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_27_
1091. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_28_
1092. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_28_
1093. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_29_
1094. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#10_29_
1095. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#11_
1096. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#12_
1097. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#13_
1098. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#14_
1099. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#15_
1100. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#16_
1101. file:///home/paulo/git/z88dk/src/z80asm/doc/z80asm-future.html#17_
